{
    "kind": "youtube#playlistItemListResponse",
    "etag": "bO_sB6Gvk6uHyhyLZntFeBQ4nAI",
    "nextPageToken": "EAAaBlBUOkNESQ",
    "items": [
        {
            "kind": "youtube#playlistItem",
            "etag": "UFJpgjnDlufIdv47dSr7pYgwzMw",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLnc1dHhVcU5FYk1n",
            "snippet": {
                "publishedAt": "2022-12-11T00:05:46Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Some slick tricks with dynamic references in Rust! Episode 61 of Unhindered by Coding",
                "description": "The second half of another really productive day!\n\nAfter tidying up the whole `Population::iter` business and getting rid of `VecPop` in the first session, we came back to the `&dyn Selector` and &dyn ChildMaker` types in `Generation`.\n\nBoth the `selector` and `child_maker` fields in `Generation` were `&dyn`s, which led to a lot of clutter throughout `Generation` and a bit in `ChildMaker`. So we used #esitsu's idea of having `Generation` be generic in `P, S, C` (for `Population`, `Selector`, and `ChildMaker`), moving the dependencies to the specific `impl` blocks so can be as specific as we need to be.\n\nThis forced a similar change to `ChildMaker`, which is now generic in two types (`P` and `S`).\n\nThe real \"trick\", then, was to have dynamic references to `Selector` and `ChildMaker` also implement the relevant trait:\n\n```rust\nimpl('a, P: Population) Selector(P) for &'a dyn Selector(P) {\n fn select('pop)(&self, rng: &mut ThreadRng, population: &'pop P) \n  - &'pop P::Individual\n {\n  (*self).select(rng, population)\n }\n}\n```\n\nThis lets us pass in a dynamic reference when we construct the first `Generation`, and then only that reference gets cloned (which is cheap) as we move from one generation to the next.\n\nWe could then pass references to, e.g., the selector when we construct the initial generation. We had to explicitly say that we wanted to pass it in as a `&dyn Selector`, though:\n\n```rust\nlet mut generation = Generation::new(\n population,\n &selector as &dyn Selector,\n &child_maker as &(dyn ChildMaker + Sync + Send),\n);\n```\n It sort of feels like the compiler should have been able to figure that out for us, but there we are. Note that we also had to explicitly list `+ Sync + Send` for the `ChildMaker`, but not for the `Selector`, which seems weird to me.\n\n================\n\nFor the moment (probably through 2022) I'm streaming at https://twitch.tv/NicMcPhee four times a week:\n\n* Tuesday: 10am-noon CST\n* Wednesday: 7-9pm CST\n* Saturday: 10am-noon and 2-4pm CST\n\nI've put the `ice-repos` project on ice for the moment and I'm going to focus all my energies on the `rust-ga` project. I _really_ want to get a basic genetic programming system implemented so we can evolve programs, and we'll get there faster if we stay focused on that.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/w5txUqNEbMg/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/w5txUqNEbMg/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/w5txUqNEbMg/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/w5txUqNEbMg/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/w5txUqNEbMg/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 0,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "w5txUqNEbMg"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "37xbnVzSEWX1MOCRSOEdr3idbbs",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLnd4OE9pam9OZGtV",
            "snippet": {
                "publishedAt": "2022-12-10T23:52:59Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Converting `Population::iter()` method to trait implementations! Episode 60 of Unhindered by Coding",
                "description": "The first half of another really productive day!\n\nOne dangling bit from last time was we had a `Population::iter()` method that tied us down to some particular ways of accessing members of a population. This was particularly unfortunately, since `iter()` is by nature linear time access, and selectors like `Random` and `Tournament` really want O(1) access.\n\nIn the first session, we got rid of the `Population::iter()` method, instead adding a requirement to `Best` and `Tournament` that the `Population` implement `IntoIterator()`:\n\n```rust\nimpl(P) Selector(P) for Best\nwhere\n P: Population,\n for('pop) &'pop P: IntoIterator(Item = &'pop P::Individual),\n P::Individual: Ord,\n{ … }\n```\n\nWe then realized that using `IntoIterator` wasn't a great choice for selectors that need fast random access (`Random` and `Tournament`), so for those we instead required that the `Population` implement `AsRef([P::Individual])`, which gives us O(1) random access. Only populations like `Vec` (or wrappers of them) will be able to implement those, but that might be OK since it helps make it clear that you may not want to be using tournament selection if you can't implement slices.\n\nOnce all that was done, we got rid of the `Population::iter()` method, achieving the goal of this bit of work!\n\n### Getting rid of `VecPop`\n\nNow that all we need for selection is to implement `IntoIterator` and `AsRef([P::Individual])`, we can just use \"raw\" vectors since they implement both of those types. This allows us to get rid of `VecPop`, replacing all references to it with `Vec`.\n\nI did this by deprecating `VecPop`, which told us everywhere it was being used. Most of the logic in `VecPop` was already in `Vec` or very easy to add. The one complicated bit was `VecPop::generate`, which we addressed by creating a `Generation: Population` trait similar to what we did for `Generate: Individual` earlier. (There was some wierdness of two traits with the same name, but being able to do `use individual::Generate as _` cleaned a lot of that up – I had no idea you could do that!) Implementing that new trait for `Vec` was mostly a matter of relabelling that code, so that was nice.\n\nThis led to issues with the `new_bitstring_population` function, which we ultimately just changed into a free-floating function, updating the calls to it.\n\nAfter replacing all the references to `VecPop` in `lib.rs`, we were able to remove `VecPop` altogether, and that wrapped up the first session!\n\n================\n\nFor the moment (probably through 2022) I'm streaming at https://twitch.tv/NicMcPhee four times a week:\n\n* Tuesday: 10am-noon CST\n* Wednesday: 7-9pm CST\n* Saturday: 10am-noon and 2-4pm CST\n\nI've put the `ice-repos` project on ice for the moment and I'm going to focus all my energies on the `rust-ga` project. I _really_ want to get a basic genetic programming system implemented so we can evolve programs, and we'll get there faster if we stay focused on that.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/wx8OijoNdkU/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/wx8OijoNdkU/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/wx8OijoNdkU/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 1,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "wx8OijoNdkU"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "7ckylykGp_Gk3XKmSpAxQTmk5HQ",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLlhrNk9HZUFjajNR",
            "snippet": {
                "publishedAt": "2022-12-08T19:48:10Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "More generalization using traits in our Rust GA system! Episode 59 of Unhindered by Coding",
                "description": "Another really productive session, and I think we have all/most of the trait-ification of the Rust-GA system done! `Generation`, `Selector`, and `ChildMaker` all now depend on a single generic type `P` instead of the old `G, R` dependency. Huzzah!\n\nWe started by adding the new `Population` trait, and having `VecPop` implement that trait. This required that every module that used `VecPop` now also import `Population` so it would have access to the trait methods.\n\nWe removed the `best_individual()` method from both `Population` and `Generation`, and converted the few places that used those methods to use the `Best` selector instead esitsu@Twitch pointed out that if we don't have `{}` in our definition of a struct (e.g., `struct Best;`), when we can refer to `impl`ed methods with just `Best.select(…)` and don't need to \"construct\" an instance. Very cool! So I removed the `{}` from both `Best` and `Random` and eliminated the few \"constructions\" of instances of `Best`.\n\nWe changed the definition of `Selector` to depend on `P: Population` instead of `I`. This then bled out all across the universe, essentially forcing us to make the related changes in `Generation` and `ChildMaker`. That makes me a _little_ sad, because it didn't seem as incremental as I'd prefer, but it wasn't too bad. In a larger system, though, it would be nice to be able to control that better.\n\nAfter that was all done, we then changed `Generation` so that it was generic in `P: Population` instead of in `G, R` as before. This really simplified a bunch of things, so I'm wondering if we should have made `Generation` generic first instead of last? I'm not sure.\n\nesitsu@Twitch noticed that our `Generation::population` field was public, and suggested we encapsulate it, so we did. We added a getter that returns the `population`, which bugged me at first, but given that _all_ that reveals is that we have (or can make) something that implements the new (quite limited) `Population` trait, that really doesn't tie us to much.\n\nFinally, in our rather mechanical refactoring, we'd ended up with `P: Population(Individual = EcIndividual(G, TestResults(R)))` in our `Lexicase` selector. esitsu@Twitch noted that we could clean that up with:\n\n```rust\nP: Population,\nP::Individual: Individual(TestResults = TestResults(R)),\nR: Ord\n```\n\nI'd been all hot to make a new trait and require that `P::Individual` implement that new trait, but it turns out that all we needed to do was say what type the associated `TestResults` type in `Individual` needed to be!\n\n## What to do next\n\nThere are (at least) two things to try to address in the next session:\n\n- Figure out how to access individuals in a population? At the moment we have an `iter()` method in the `Population` trait, but esitsu@Twitch doesn't like that solution. I'm not entirely sure what other options would make much sense, though? We could require that populations implement some trait that lets us get slices from them?\n\n- Get rid of the two uses of `&'a dyn` in `Generation`. esitsu@Twitch had a nifty trick that allowed us to replace those with just `Selector` and `ChildMaker`, where, e.g., we say that `&'a dyn Selector` implements `Selector`.\n\n================\n\nFor the moment (probably through 2022) I'm streaming at https://twitch.tv/NicMcPhee four times a week:\n\n* Tuesday: 10am-noon CST\n* Wednesday: 7-9pm CST\n* Saturday: 10am-noon and 2-4pm CST\n\nI've put the `ice-repos` project on ice for the moment and I'm going to focus all my energies on the `rust-ga` project. I _really_ want to get a basic genetic programming system implemented so we can evolve programs, and we'll get there faster if we stay focused on that.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/Xk6OGeAcj3Q/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/Xk6OGeAcj3Q/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/Xk6OGeAcj3Q/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/Xk6OGeAcj3Q/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/Xk6OGeAcj3Q/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 2,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "Xk6OGeAcj3Q"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "JGX9Ss4CfKc1l0o858go9wcgt7Y",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLkRsc19XVUJXeHRv",
            "snippet": {
                "publishedAt": "2022-12-06T19:42:28Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Cool generalization of traits in Rust GA system! Episode 58 of Unhindered by Coding",
                "description": "Another really productive session, and esitsu@Twitch shared a nifty trick! :-)\n\nThere were two major parts to the session:\n(\n- Converting all the `selectors` from `Selector(G, R)` to `Selector(I)`\n- Converting `ChildMaker(G, R)` to `ChildMaker(I)`\n\n### Convert all the selectors to `(I)` instead of `(G, R)`\n\nWe started by converting everything in the `selectors` module to use the new `SelectorI(I)` trait that depends on just one generic `I` instead of the old `(G, R)` dependency. This removed all references to `EcIndividual` in that module.\n\nThe goal now would be to remove all \"external\" references to the `Selector` trait (i.e., references outside of the `selectors` module), ultimately renaming `SelectorI` to just `Selector`.\n\nesitsu@Twitch suggested the nice technique in `mod.rs` of `impl`ing `Selector(G, R)` for all types `T` that also `impl` `SelectorI`. That was probably the coolest thing I learned in today's session.\n\nThis \"trivially\" allowed all our various implementation of `Selector` (`Best`, `Random`, etc.) to implement the \"old\" `Selector` trait as soon as we had them implementing the new `SelectorI` trait. This way all \"outside\" references to `Selector(G, R)` should still work without any changes, which is slick.\n\n### Convert `Generation` to use new `SelectorI(I)` trait\n\nIt turns out that the only references to `Selector(G, R)` were in `Generation`, and they were very easy to replace with references to the new `SelectorI(I)` trait.\n\n### Rename `SelectorI` to `Selector`\n\nNow that all references to the old `Selector(G, R)` were gone, we removed that, and renamed `SelectorI` to `Selector`.\n\n### Add `ChildMakerI(I)` trait\n\nThe idea here was to follow the same pattern we'd used with `SelectorI(I)` above. There turned out to be a twist, though, because `ChildMaker` takes `Generation(G, R)` as an argument, so we ended up with a cyclic type issue. A trait `ChildMaker(I)` wouldn't be able to refer to `Generation(G, R)` since it wouldn't have `G` and `R` at its disposal. esitsu@Twitch suggested thinking about whether `ChildMaker` _really_ needed the (whole) `Generation` to do its thing. This led to having the `make_child_i` method in `ChildMakerI` take the population and selector from the `Generation` as arguments instead of just taking the `Generation`. To be honest I'm not thrilled about having 2/3 of the `Generation` get passed in as arguments, and think there's probably a new trait to be added to deal with this, but this works for now.\n\nBecause we couldn't have two `make_child` methods with different signatures, we also had to rename the method in `ChildMakerI(I)` to something like `child_maker_i` to avoid the name collision.\n\n### Replace all `ChildMaker` with `ChildMakerI`\n\nThere were only a few places (all in `Generation`) that referred to `ChildMaker`, so it was easy to replace all the instances of `ChildMaker` with `ChildMakerI`. \n\n### Rename `ChildMakerI` back to `ChildMaker`\n\nOnce there were no more uses of the old `ChildMaker(G, R)`, we could remove that trait, and rename `ChildMakerI` to `ChildMaker`, and rename the method `make_child_i` to `make_child`.\n\n_In retrospect, I should have given the *old* versions (that I was going delete) the funky names, and probably deprecated them at the same time._ I should keep this in mind for the #blogpost_idea. \n\n## What to do next\n\nI think the next step is to tratit-ify the idea of a `Population`. Then all three components of `Generation` will be traits, and we can hopefully change it to be `I` instead of `G, R`.\n\n================\n\nFor the moment (probably through 2022) I'm streaming at https://twitch.tv/NicMcPhee four times a week:\n\n* Tuesday: 10am-noon CST\n* Wednesday: 7-9pm CST\n* Saturday: 10am-noon and 2-4pm CST\n\nI've put the `ice-repos` project on ice for the moment and I'm going to focus all my energies on the `rust-ga` project. I _really_ want to get a basic genetic programming system implemented so we can evolve programs, and we'll get there faster if we stay focused on that.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/Dls_WUBWxto/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/Dls_WUBWxto/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/Dls_WUBWxto/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 3,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "Dls_WUBWxto"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "SRquRY511B_6bwnzNWCFNKzKvKg",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLkJteldZV3ZKcTM0",
            "snippet": {
                "publishedAt": "2022-12-04T21:47:35Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "(Con't) Encapsulation and module management in Rust GA system! Episode 57 of Unhindered by Coding",
                "description": "We continued the encapsulation and module management we'd started in the morning system, working to introduce traits for all the key components in our EC system.\n\nOne of the nifty things we did was introduce a new `Generate` trait for `Individual`s, that encapsulates the complexity of (randomly) generating new `Individuals`s, and introduced an `Individual` trait. The `EcIndividual` struct now implements both of those traits.\n\nWe also did a nifty thing where we introduce a new `VecPopI` struct that is generic on a _single_ type `I` (for `Individual`) instead of the old `VecPop` which is generic on two types (`G` and `R`). The goal ultimately is to get right of the old `VecPop` and then rename `VecPopI` to just be `VecPop`, but I wanted to do things more incrementally than we had the first time.\n\nWe then redefined `VecPop(G, R)` to be `VecPopI(EcIndividual(G, R))`, and the goal is to get rid of all of the instances of `VecPop(G, R)`, but we can do so more incrementally because everything will still compile and run at each step.\n\nImplementing `Generate` for `VecPopI` was interesting. Since we now had `I: Generate` (and `Generate: Individual`), we knew that `I` implemented `Individual`, which gave us access to `I::Genome` and `I::TestResults`, which then became the `G` and `R` inside the old `generate` method.\n\nIn finishing the remaining conversion from `VecPop(G, R)` to `VecPop(I)`, there was a weird bit in `main.rs` where I had to add `::(i64)` to the `.sum()` calls (so `sum::(i64)()`). I'm really not at all sure why those were necessary. Everything looked like it \"knew\" that the test type was `i64`, so I don't get why it needed us to explicitly say that now, especially since we hadn't needed to before. That would be something to look into.\n\nA bunch of searching and replacing got us from `VecPop(G, R)` to `VecPop(EcIndividual(G, R))`, and that eliminated all the references to the old two-generic version of `VecPop`.\n\nThe next step is to look for instances of `EcIndividual` that we can replace with the new `Individual` interface.\n\n================\n\nFor the moment (probably through 2022) I'm streaming at https://twitch.tv/NicMcPhee four times a week:\n\n* Tuesday: 10am-noon CST\n* Wednesday: 7-9pm CST\n* Saturday: 10am-noon and 2-4pm CST\n\nI've put the `ice-repos` project on ice for the moment and I'm going to focus all my energies on the `rust-ga` project. I _really_ want to get a basic genetic programming system implemented so we can evolve programs, and we'll get there faster if we stay focused on that.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/BmzWYWvJq34/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/BmzWYWvJq34/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/BmzWYWvJq34/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/BmzWYWvJq34/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/BmzWYWvJq34/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 4,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "BmzWYWvJq34"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "vUb_1SltiV9i5zoyqhsPGtTLnZc",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLjI1ZDlfRXA0TkNR",
            "snippet": {
                "publishedAt": "2022-12-03T20:21:00Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Encapsulation and module management in Rust GA system! Episode 56 of Unhindered by Coding",
                "description": "I wasn't super happy with how Wednesday night ended up. I think we'd pushed too hard, there was a lot I didn't understand as well as I'd like, and things were definitely undertested.\n\nOne specific thing I found was that changes we were making in, e.g., `Population`, were bleeding all over the place, and because there wasn't any testing there were features that weren't getting \"checked\" until we used them in `Generation` or `lib.rs`. This meant that compiler errors were often fairly removed from the actual source of the problem, which certainly confused me.\n\nI also found it confusing to have our associated `Individual` type in `Population` had the same name as the `struct Individual {…}`. There were error messages that refered to `Individual` and I wasn't always sure which type it was refering to, especially if I tried to just skim over the error.\n\nSo we started over. :-)\n\nThe goal was to get to converting some existing types to traits, but we in fact spend the whole session encapsulating data, writing tests, and moving some code into a new module. The highlights include:\n\n- Renamed `Population` to `VecPop` to free up `Population` in the namespace for the upcoming trait.\n- Encapsulated the fields in `VecPop` so they're private.\n - These two steps were almost exact repeats of what we did Wednesday.\n- Added some simple tests for `VecPop`.\n- Encapsulated the fields in `Individual`.\n- Renamed `Individual` to `EcIndividual` and put it in its own new module.\n\nWe're going to continue all this in the afternoon session.\n\n================\n\nFor the moment (probably through 2022) I'm streaming at https://twitch.tv/NicMcPhee four times a week:\n\n* Every Tuesday and Saturday from 10am-noon CDT . We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\n* Wednesday nights from 7-9pm CDT, implementing an evolutionary computation system in Rust to see what the performance is like. https://github.com/NicMcPhee/rust-ga\n\n* Saturday afternoons from 2-4pm CDT, working on some possible lab exercises in Rust for our Systems Practicum course.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/25d9_Ep4NCQ/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/25d9_Ep4NCQ/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/25d9_Ep4NCQ/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/25d9_Ep4NCQ/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/25d9_Ep4NCQ/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 5,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "25d9_Ep4NCQ"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "3ILyoXSQzHsKGaQOzty6E2sUyWw",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLnpFTFB3ZUlmUDZR",
            "snippet": {
                "publishedAt": "2022-12-01T04:53:00Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Converting `Population` from a Rust type to a trait! Episode 55 of Unhindered by Coding",
                "description": "Turning `Population` into a trait was the primary focus of tonight's stream. I think we're _nearly_ there, but there are still some compilation errors in `generation.rs` and `lib.rs` that need to be addressed, and I'm guessing that they may push a few more changes back into some of the currently \"working\" modules. It was an exciting first stream after two weeks away!\n\nIn moving towards making `Population` a trait, we made the `individuals` field private in the `Population` struct, thus hiding the `Vec` of `Individual` implementation detail from everyone and forcing us to better understand what things a `Population` needs to be able to do. Fixing the resulting compilation errors was mostly pretty straightforward (lots of uses of the existing and underused `is_empty` and `size` methods). The most complicated bit was implementing `FromIterator` and `FromParallelIterator` and adding an `iter` method to `Population`.\n\nIn the same vein, we also renamed the `Population` struct to `VecPop` so that the name `Population` would be free for our new trait.\n\nWe then created a new `Population` trait and start sketching out what it needs to do, which led to a _lot_ of changes and not a small amount of confusion along the way. Again esitsu@Twitch was an *enormous* help!\n\nSo far the new trait only has two methods, `is_empty()` and `size()`. We have a nifty default implementation of `is_empty()` that uses `size()`, so we only have to implement `size()` in types that impl this trait.\n\nThe biggest win in this trait is arguably the associated type `Individual`. That manages to hide all references to the old `G` and `R` generics throughout, e.g., the selectors, and once we do something similar for `ChildMaker` we should be able to get rid of `G` and `R` from `Generation` as well!\n\nI suspect that most, if not all, implementations of `Population` will also need to implement `IntoIterator`, so we might want to somehow cook that into this trait?\n\nWe removed `best_individual` from both `Population` and `Generation` since we have a `Selector` that does that, so we'll just keep that logic in that selector.\n\nThe biggest change was then to the selectors, which now are generic in `P: Population` instead of `G` and `R`. This led to a _lot_ of changes through the code.\n\nThere's a `where` clause in *every* selector's `select` method that is a quite annoying repetition. Can't we somehow say that once and have everyone get the memo?\n\nI think this is a huge win, though, as the dependencies are clearer, and the generics are definitely moving in the right direction.\n\n================\n\nFor the moment (probably through 2022) I'm streaming at https://twitch.tv/NicMcPhee four times a week:\n\n* Every Tuesday and Saturday from 10am-noon CDT . We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\n* Wednesday nights from 7-9pm CDT, implementing an evolutionary computation system in Rust to see what the performance is like. https://github.com/NicMcPhee/rust-ga\n\n* Saturday afternoons from 2-4pm CDT, working on some possible lab exercises in Rust for our Systems Practicum course.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/zELPweIfP6Q/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/zELPweIfP6Q/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/zELPweIfP6Q/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/zELPweIfP6Q/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/zELPweIfP6Q/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 6,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "zELPweIfP6Q"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "OFCRjPdyHt4FUiWii9ojgHPHV2Q",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLkdyVV80ZEdvNnIw",
            "snippet": {
                "publishedAt": "2022-11-15T19:56:15Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Using Rust EC-specific traits instead of `Fn`s! Episode 54 of Unhindered by Coding",
                "description": "A really successful session – a nice way to end things before a two week vacation! We did a lot of cool work changing my use of \"raw\" `Fn`s to evolutionary computation specific traits. I felt like I was writing \"real\" rust, and just writing well-designed code.\n\nI started by going over the changes I made in introducing the `ChildMaker` trait on my own outside of the stream. esitsu@Twitch had a nice idea for fixing a problem I'd had with my types in `lib.rs` and that moved the `Error`/`Score` specification into the type declaration for `Generation`, which was nice.\n\nWe talked some more about the tradeoffs of all my lifetime annotations and using things like `Arc` as an alternative. I might want to come back to that later.\n\nThe big win then was turning `Selector` into a proper trait. This allows us to\n\n- Move all the selectors out of `Population` and into a new `selectors` module.\n- Make `Weighted` an implementation of `Selector`\n - This let us have `Generator` hold a single `Selector`, which could then be a single selector or a composite like `Weighted`. _So_ much nicer.\n - I also got to implement the builder pattern for the first time in Rust, which was quite fun.\n- Store \"shared\" information in the shared instance of that type so we don't have to keep passing it around. The tournament size in `Tournament` is a nice example of that.\n\nAt one point in implementing `Lexicase` I tried storing the `case_indices` in the `Lexicase` struct. In theory that shouldn't have worked, though, because then all the threads would be sharing a reference to a single `Lexicase` object, and thus sharing a sorting of the test case indices. We didn't get far enough to figure out where Rust would have complained about that, but I'm hoping/assuming it would have? Otherwise we don't really have \"fearless concurrency\", do we?\n\n================\n\nFor the moment (probably through 2022) I'm streaming at https://twitch.tv/NicMcPhee four times a week:\n\n* Every Tuesday and Saturday from 10am-noon CDT . We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\n* Wednesday nights from 7-9pm CDT, implementing an evolutionary computation system in Rust to see what the performance is like. https://github.com/NicMcPhee/rust-ga\n\n* Saturday afternoons from 2-4pm CDT, working on some possible lab exercises in Rust for our Systems Practicum course.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/GrU_4dGo6r0/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/GrU_4dGo6r0/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/GrU_4dGo6r0/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/GrU_4dGo6r0/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/GrU_4dGo6r0/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 7,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "GrU_4dGo6r0"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "do0X2kuvfdknr-DuqkLNog0COx4",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLjA2eFcwTDN5RUpB",
            "snippet": {
                "publishedAt": "2022-11-12T23:27:25Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Adding `anyhow` error handling to segmented file transfer client! Episode 53 of Unhindered by Coding",
                "description": "This was a very productive stream, even if it leaned a little towards the \"grinding\" side of things at times. The main outcome was adding contexts to most of the (many) potential errors in the client using the `anyhow` crate. Adding the contexts themselves was often pretty straightforward, although time consuming, but there were some interesting opportunities to think about the error handling and improve things in places.\n\nThere was a wee bit of flailing in the middle because the connection to the server fails considerably later than I expected if the server isn't running. I thought it would fail as soon as we try to connect to it, but it doesn't fail until we actually try to _read_ from that socket. We were even able to _write_ to the socket without generating an error. I suspect this is because UDP is so relaxed about things, but I'm not at all sure.\n\nWe looked at three different versions of a conditional in `FileManager::write_all_files` that was interesting. I liked the `match` we ended up with, but the other options were definitely worth look at and thinking about, so I'm glad we did that.\n\nI think the biggest improvement to the code besides the error handling was in `PacketGroup::write_file`. I hadn't really liked the handling of the range of packet numbers there, and thinking about the error handling pushed me to clean that up. I think the big win was moving the error checkout outside the loop, so we only check it once instead of converting and checking every `packet_number` on each pass through the loop.\n\nI still need to finishing add contexts to `packets.rs` (or decide that I don't need contexts there because of the `thiserror` messages).\n\nI should consider adding more tests that specifically flush out as many of these errors as possible. I don't know, for example, how to make sure that we're generating the \"right\" error if a `PacketGroup` doesn't have a file name when we try to write that file. To cause that to fail \"in the real world\" I'd basically have to write a special server that deliberately sends an incomplete set of packets. I could write tests that \"simulate\" that scenario by not sending all the necessary packets. I could also see if I can mock the server if I want to test things like the connection errors.\n\nThere will be no streams for two weeks starting next Wednesday (16-29 Nov) as I'll be away visiting family.\n\n============\n\nFor the moment (probably through 2022) I'm going to be streaming on Twitch (https://twitch.tv/NicMcPhee) every Saturday afternoon from 2-4pm CDT with a focus on these kinds of systems projects.\n\nI'm also streaming on Twitch every Tuesday and Saturday from 10am-noon CDT. We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\nLastly, I'm streaming on Twitch on Wednesday nights from 7-9pm CDT working on implementing an evolutionary computation system in Rust, in part to see what the performance is like.\n\nI've also created a Discord server for Unhindered by Coding. There's an invite link QR code in the video, but that's only good for a week. If you stumble across this later and would like to join, let me know in the comments and I can share a working invite link.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/06xW0L3yEJA/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/06xW0L3yEJA/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/06xW0L3yEJA/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/06xW0L3yEJA/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/06xW0L3yEJA/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 8,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "06xW0L3yEJA"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "T7rTSMcZBf1ot7eKYpYQnLgU4PM",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLnRFSGZfbmZuUlBj",
            "snippet": {
                "publishedAt": "2022-11-12T19:20:10Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Making scores and errors more generic! Episode 52 of Unhindered by Coding",
                "description": "What a great session! I felt like we made a lot of excellent progress and are really using traits in a very \"Rusty\" way that I like. I feel like I can _read_ all the code, but I'm not sure how much of that I could _write_ yet without help. But that's what learning is all about, right? esitsu@Twitch and Wgaffa@Twitch were, as always, the real heros of the stream, providing great ideas and patiently getting me unstuck.\n\nWe used the `num_traits` to nicely solve the Clippy warning about converting from `usize` to `f32` in `mutate_one_over_length`, with a nifty use of `map` and `unwrap_or` to defaults to `f32::MIN_POSITIVE` when the `usize` length is too big to fit in an `f32`. I doubt this will _ever_ happen in practice, but it's cool that Rust caught the issues and encouraged us to be thoughtful about it.\n\n`num_traits` is part of [a whole family of numeric traits](https://github.com/rust-num/num), and we could probably use these to genericize the `i64` that is currently inside `Score` and `Error`.\n\nWe moved the test results types (`Score`, `Error`, `TestResults`, etc.) over to a new `test_results.rs` module, which reduced the clutter in `individual.rs`.\n\nI think the big win of the day was implementing `From` and `Sum` traits on `Score` and `Error`, and a nifty implementation of the `Sum` trait for `TestResults`. This really cleaned up the creation of `TestResults` values in `lib.rs`, and \n\nIn retrospect, I do think that `Sum` wasn't the perfect trait to implement for `TestResults` since a `TestResults` value isn't really the \"sum\" of a bunch of individual errors. `.collect()` from the `FromIterator` trait is probably the better choice, but that wouldn't be hard to do (& `Sum` is working well for now).\n\nWe then modified things in `lib.rs` so that in the end we only needed to change `Score` to `Error` (or vice versa) in _only one place_ to switch between better is up or better is down. Super nifty!\n\nI agree with #esitsu that the directionality should probably be in the `scorer` and not in `make_child`, so that's another refactoring that we probably want to look into later.\n\n================\n\nFor the moment (probably through 2022) I'm streaming at https://twitch.tv/NicMcPhee four times a week:\n\n* Every Tuesday and Saturday from 10am-noon CDT . We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\n* Wednesday nights from 7-9pm CDT, implementing an evolutionary computation system in Rust to see what the performance is like. https://github.com/NicMcPhee/rust-ga\n\n* Saturday afternoons from 2-4pm CDT, working on some possible lab exercises in Rust for our Systems Practicum course.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/tEHf_nfnRPc/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/tEHf_nfnRPc/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/tEHf_nfnRPc/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 9,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "tEHf_nfnRPc"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "NTcfe6XWm42dE9PZp1sNYcXjCEQ",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLnpaWDlLR2xZeVk0",
            "snippet": {
                "publishedAt": "2022-11-10T06:13:13Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Making scores and errors more generic! Episode 51 of Unhindered by Coding",
                "description": "That was quite productive, in a somewhat grinding sort of way. The big thing was adding the second generic type `R` to `Individual` (for test `r`esults). In the process I renamed the weird \"internal\" `R` type to `H` (to free up `R` for test results), and while I was there I renamed `T` to `G` (for the type of the `g`enome). We then had to refactor these changes out across the entire system, which was really tedious and took over an hour. We did get it done, though, and were able to run the system successfully!\n\nA #blogpost_idea would be to think about how one might have managed that refactoring in a more \"controlled\" way so one didn't have to change _everything_ when one made the change, but could do it in a more stepwise manner. My guess is that you could have created a type `ParameterizedIndividual` , and then defined `Individual` in terms of that? Then the rest of the code would still compile and run. You could deprecate `Individual` and then chase the implications of that?\n\nesitsu@Twitch helped me understand why I needed to implement both `Ord` and `PartialOrd` for various types instead of implementing one and `#derive`ing the other. `#derive` is a macro and _only_ has access to the type definition, and doesn't know what other traits you might implement elsewhere. So it has no way of implementing something like `PartialOrd` using a later definition of `Ord` somewhere else. Thus I have to implement both of them.\n\n================\n\nFor the moment (probably through 2022) I'm streaming at https://twitch.tv/NicMcPhee four times a week:\n\n* Every Tuesday and Saturday from 10am-noon CDT . We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\n* Wednesday nights from 7-9pm CDT, implementing an evolutionary computation system in Rust to see what the performance is like. https://github.com/NicMcPhee/rust-ga\n\n* Saturday afternoons from 2-4pm CDT, working on some possible lab exercises in Rust for our Systems Practicum course.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/zZX9KGlYyY4/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/zZX9KGlYyY4/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/zZX9KGlYyY4/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/zZX9KGlYyY4/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/zZX9KGlYyY4/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 10,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "zZX9KGlYyY4"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "PXOfu7jeCtAPuugOH6ffrrbCCCk",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLmltMXcwdGhZWmlN",
            "snippet": {
                "publishedAt": "2022-11-08T19:45:23Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Making scores and errors more generic! Episode 50 of Unhindered by Coding",
                "description": "This was episode 50 – pretty amazing, eh?!?\n\nSince I'm super stuck on the OAuth business, I decided to focus mostly on the evolutionary computation project today.\n\nWe did however spend about 1/2 an hour talking about OAuth and how complicated that is. There were some good ideas shared in the chat, so I'll go back and see if I can get that going again.\n\nAfter we stepped away from OAuth, I reviewed the timing results from last week (spoiler alert – Rust beats Clojure by a fair bit), and went over the basics of PushGP for a while. After about another 1/2 hour we got back into the code. In the end we never actually got to PushGP, though, because we spent the hour exploring ways to handle ordering in score/error values. \n\nThe problem is that in some contexts we want \"bigger is better\" (what I'm currently calling scores) and in other cases we want \"smaller is better\" (what I'm currently calling errors).\n\nWe explored several different ways of addressing this and I think came up with some good ideas. None of them are \"complete\" and propagated through the entire system, though.\n\nWhat we've got at the moment is:\n\n* A pair of `Score` and `Error` structs that both hold a (currently `i64`) value, where the assumption is that for  `Scores` higher is better and for `Errors` lower is better. (I really like this idea.)\n* We also have a `TestResult` enum that holds either a `Score` or an `Error`.\n* I would like to abstract out the `i64` from `Score` and `Error`.\n* I don't know how we're going to handle vectors of `TestResults`.\n\n================\n\nFor the moment (probably through 2022) I'm streaming at https://twitch.tv/NicMcPhee four times a week:\n\n* Every Tuesday and Saturday from 10am-noon CDT . We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\n* Wednesday nights from 7-9pm CDT, implementing an evolutionary computation system in Rust to see what the performance is like. https://github.com/NicMcPhee/rust-ga\n\n* Saturday afternoons from 2-4pm CDT, working on some possible lab exercises in Rust for our Systems Practicum course.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/im1w0thYZiM/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/im1w0thYZiM/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/im1w0thYZiM/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/im1w0thYZiM/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/im1w0thYZiM/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 11,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "im1w0thYZiM"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "WDBIFFj55svtBOZR59H_kc1SXxs",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLmJFc3B2QV9IcFdr",
            "snippet": {
                "publishedAt": "2022-11-05T22:24:58Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Writing the files and finishing the app! Episode 49 of Unhindered by Coding",
                "description": "This was really productive stream, and we basically finished this lab!. It's arguably shorter and cleaner than the Java version, and the testing was pretty straightforward, especially with quickcheck.\n\nI realized I didn't have all the Clippy tests turned on, so I added those, and we made most of them (except for `unwrap` and `expect`) go away.\n\nI think one of the nice things about the Rust implementation is that it does force us to be clearer about our error handling than folks would often be in, e.g., a Java universe. We spent about 30 minutes adding `anyhow` error handling, which I then \"finished\" after the stream ended. There was some weirdness in the test code where I didn't know how to look inside an `anyhow::Error`, but other than that I think things are pretty good.\n\nOne thing that came up during the stream was having a useful UI. Right now it just prints out a bunch of dots as \"proof of life\", but it would be nice to convert to something like a curses UI that would tell us how many packets for each file had been downloaded, etc. Not sure if I want to devote a stream for that or not. Some potential resources:\n\n============\n\nFor the moment (probably through 2022) I'm going to be streaming on Twitch (https://twitch.tv/NicMcPhee) every Saturday afternoon from 2-4pm CDT with a focus on these kinds of systems projects.\n\nI'm also streaming on Twitch every Tuesday and Saturday from 10am-noon CDT. We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\nLastly, I'm streaming on Twitch on Wednesday nights from 7-9pm CDT working on implementing an evolutionary computation system in Rust, in part to see what the performance is like.\n\nI've also created a Discord server for Unhindered by Coding. There's an invite link QR code in the video, but that's only good for a week. If you stumble across this later and would like to join, let me know in the comments and I can share a working invite link.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/bEspvA_HpWk/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/bEspvA_HpWk/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/bEspvA_HpWk/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/bEspvA_HpWk/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/bEspvA_HpWk/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 12,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "bEspvA_HpWk"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "rBAubZHho6owhnqgebApHuQrifY",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLld0Zk9KU1hNWU1N",
            "snippet": {
                "publishedAt": "2022-11-05T17:42:00Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Even more (OAuth) flailing!: Episode 48, Unhindered by Coding",
                "description": "_Soooo_ much flailing – I really don't know what the heck I'm doing here, TBH, and it really shows.\n\nIn the (limited) good news, I got the `yew-oauth2` crate set up in the web app, which was quite cool. \n\nAfter that, though, I made zero progress. I was _totally_ incapable of getting that to talk successfully to the GitHub OAuth tools. I kept getting a `redirect_uri_mismatch` error, where it seems that it's trying to talk to an edge server (perhaps through a redirect?)\n\nIf I could get `yew-oauth2` to not require a redirect URI then it would just use the one registered with GitHub and life would be good, but it doesn't look like I can do that. I could try forking their project and just hacking out that component of the configuration? Or making it an `Option` type? Not sure how to best proceed.\n\n================\n\nFor the moment (probably through 2022) I'm streaming every Tuesday and Saturday from 10am-noon CDT (https://twitch.tv/NicMcPhee). We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\nI'm also going to be streaming on Twitch on Wednesday nights from 7-9pm CDT and Saturday afternoons from 2-4pm CDT. I'm going to be using those streaming slots to work on implementing an evolutionary computation system in Rust to see what the performance is like, and working on some possible lab exercises in Rust for our Systems Practicum course.\n\nI've also created a Discord server for Unhindered by Coding. There's an invite link QR code in the video, but that's only good for a week. If you stumble across this later and would like to join, let me know in the comments and I can share a working invite link.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/WtfOJSXMYMM/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/WtfOJSXMYMM/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/WtfOJSXMYMM/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/WtfOJSXMYMM/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/WtfOJSXMYMM/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 13,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "WtfOJSXMYMM"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "plN7j9taIsYgh22f-D270w14hv4",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLnQ0X3lXaHl1VmZr",
            "snippet": {
                "publishedAt": "2022-11-03T03:45:35Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Finishing the simple GA in Clojure! Episode 47 of Unhindered by Coding",
                "description": "We started with the simple GA I'd begun in Clojure over the summer (https://github.com/NicMcPhee/clojure-ga), and got it \"finished\" to the point that we can now meaningfully compare the timing for the Rust and Clojure versions (although there was definitely some non-trivial confusion along the way). Based on some simple command-line tests, Rust is definitely *quite* a lot faster (at least 40-50x, maybe over 100x?). I'll need to actually run the serious benchmarks so we can see what all this actually means.\n\nWe got all of the new Clojure code done around the end of the first hour, but something was way off because the Clojure seemed _faster_, and the runs weren't making any progress (e.g., they weren't improving the scores). The first issue was that I'd forgotten to flip less-than for greater-than when comparing scores (instead of errors). The _big_ problem, though, was two-fold:\n\n* I had totally forgotten to change `count-ones` and `hiff` so they returned _lists_ of scores instead of a single score.\n* I also hadn't changed the names of the keys in the `individual` map.\n\nThese mistakes (especially the problem with the key names) meant that lexicase was getting an _empty_ list of scores to work with, so it basically (a) used no computation to (b) return a random individual. No wonder it was both fast and unproductive.\n\nI quick implemented `count-ones` as a vector during the stream (and fixed the other problems), and that got things working. It also _seriously_ slowed down the Clojure code, making the Rust code look a _lot_ better than it had.\n\nThe short, command-line tests suggest that Rust is going to be at least 40-50 times faster than Clojure, but it's also possible that the improvement might be in the 100+x range. I'll have to actually run the benchmarks to tell.\n\n================\n\nFor the moment (probably through 2022) I'm streaming at https://twitch.tv/NicMcPhee four times a week:\n\n* Every Tuesday and Saturday from 10am-noon CDT . We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\n* Wednesday nights from 7-9pm CDT, implementing an evolutionary computation system in Rust to see what the performance is like. https://github.com/NicMcPhee/rust-ga\n\n* Saturday afternoons from 2-4pm CDT, working on some possible lab exercises in Rust for our Systems Practicum course.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/t4_yWhyuVfk/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/t4_yWhyuVfk/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/t4_yWhyuVfk/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/t4_yWhyuVfk/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/t4_yWhyuVfk/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 14,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "t4_yWhyuVfk"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "8G_j9TqoLRTOjhJ2_lfA8uIeo3E",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLloxQVFqdXp5T0I4",
            "snippet": {
                "publishedAt": "2022-11-01T19:52:15Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "So much (OAuth) flailing!: Episode 46, Unhindered by Coding",
                "description": "_Soooo_ much flailing – I really don't know what the heck I'm doing here, TBH. We got the basic Cloudflare Workers app running, but wasted a _ton_ of time because I (think I) entirely swapped out code bases under VS Code and it didn't seem to notice? Basically all the changes I was making didn't seem to have any effect, and we probably wasted a half hour or more because of that. My suspicion is that I did `rm -rf ice-repos-worker` in the terminal and then rebuilt it (in the terminal) while VS Code was open the whole time. I'm not really sure, though.\n\nWe then managed to start the build on the response URI in the worker and managed to successfully get the code and the state from that URL.\n\nAfter the stream was over I tried to add code to make the request to get a token, and that totally biffed. I can construct that request fine, but it never seems to return and I have no idea why. I can't seem to get any debugging to do anything useful. Sometimes it seems like there might be an error generated, but it's not consistent, and I'm really not sure what's happening.\n\nSigh. I obviously need to do some homework, and hopefully things will be more productive on Saturday!\n\n================\n\nFor the moment (probably through 2022) I'm streaming every Tuesday and Saturday from 10am-noon CDT (https://twitch.tv/NicMcPhee). We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\nI'm also going to be streaming on Twitch on Wednesday nights from 7-9pm CDT and Saturday afternoons from 2-4pm CDT. I'm going to be using those streaming slots to work on implementing an evolutionary computation system in Rust to see what the performance is like, and working on some possible lab exercises in Rust for our Systems Practicum course.\n\nI've also created a Discord server for Unhindered by Coding. There's an invite link QR code in the video, but that's only good for a week. If you stumble across this later and would like to join, let me know in the comments and I can share a working invite link.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/Z1AQjuzyOB8/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/Z1AQjuzyOB8/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/Z1AQjuzyOB8/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/Z1AQjuzyOB8/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/Z1AQjuzyOB8/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 15,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "Z1AQjuzyOB8"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "zx9-pxpT5gFUx8BwZfNxE9IbbdU",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLkNFdTg5MTRGM2RZ",
            "snippet": {
                "publishedAt": "2022-10-29T22:56:55Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Organizing data packets! Episode 45 of Unhindered by Coding",
                "description": "This was another really productive stream, and we're near to done on this lab; I think we can probably finish it in the next stream depending on how much we want to do on the frills.\n\nWe started by sketching out the missing parts of the loop in `main`, constructing and calling the various (unimplemented) methods in a new `FileManager` type. This did a nice job of outlining the structure of the problem and then doing a kind of functionality-driven-development for the rest. Sadly I didn't write any tests; more on that below.\n\nThe one interesting thing in finalizing `main` was the error handling. Before this we just had `main` returning an `io::Result`, but our packet parsing returned a `PacketParseError`.  I just went with a \"simple\" solution here of creating a new `ClientError` enum with `IoError` and `PacketParseError` variants. esitsu@Twitch suggested looking at the `anyhow` crate; I didn't want to wander down that road today, but it might be something to return to if we want to spend some additional time on this.\n\nWe then went into `FileManager` and worked through implementations of the methods we'd needed in `main`. \n\nThe `received_all_packets()` method was pretty straightforward, especially since `HashMap::values()` returns an iterator, and the `all()` method on iterators did exactly what I needed.\n\nWe spent quite a while on `process_packet`. I started with a simple `if-else` statement, but I knew there was a more Rusty way to do that. Once again Wgaffa@Twitch came through with a cool suggestion and with a number of suggestions from both Wgaffa and esitsu, we it down to a single line! The `Entry` types returned by `HashMap::entry()` are really interesting and allow some cool things that you just couldn't do in a non-side-effecting language.\n\nI started by adding `::new()` for both `FileManager` and `PacketGroup` , but Wgaffa pointed out that we just just derive `Default` and use `::default()` instead.\n\nI got all bogged down in the difference between `Packet::Data` (i.e. the variant `Data` in the enum `Packet`) and `Data` as a struct. That was arguably a sign that I was (a) tired and (b) don't know Rust as well as I would sometimes like to think.\n\nThe process of working through `received_all_packets` was fun. I started going with an `if-let`. I then tried something cool, but it was only available in nightly, so it didn't work. :cry: Wgaffa again shared a cool version using `map()`; I just don't think about `map()` and friends quickly enough when I have `Option` and `Result` types. We then went through three or four versions of `unwrap_or…` before we settle on just `unwrap_or()`. Then esitsu pointed out that we could just wrap the actual number of packets in `Some` and compare them with a simple equality test, bringing everything down to a single line!\n\n`process_packet` was quite straightforward, with a basic `match` taking care of things.\n\n`process_header_packet` turned out to be quite simple, but we went through some ownership fog to get there. esitsu saw it the most clearly, and I was slow to catch up. We made the `Header::file_name` field `pub(crate)` so it was visible throughout the (lib) crate, and then we were just able to capture ownership of it with `self.file_name = Some(header.file_name)`. I had expected to have to do some cloning (as did Wgaffa), but as esitsu saw/explained, `process_header_packet` takes complete ownership of `header`, so we can pass ownership of the `header.filename` string into the `PacketGroup` (i.e., `self.filename`).\n\nWe were already running long when we figured that out, but I realized that `process_data_packet` would also be _really_ short since we'd already copied the bytes out of the buffer and into `Vec` in the parsing process. All the same ownership issues applied, making that really straightforward. There's an annoying `+1` in this method that _really_ indicates how important it is to write tests for this type. We should also write tests for `FileManager` as well.\n\nFor the moment (probably through 2022) I'm going to be streaming on Twitch (https://twitch.tv/NicMcPhee) every Saturday afternoon from 2-4pm CDT with a focus on these kinds of systems projects.\n\nI'm also streaming on Twitch every Tuesday and Saturday from 10am-noon CDT. We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\nLastly, I'm streaming on Twitch on Wednesday nights from 7-9pm CDT working on implementing an evolutionary computation system in Rust, in part to see what the performance is like.\n\nI've also created a Discord server for Unhindered by Coding. There's an invite link QR code in the video, but that's only good for a week. If you stumble across this later and would like to join, let me know in the comments and I can share a working invite link.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/CEu8914F3dY/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/CEu8914F3dY/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/CEu8914F3dY/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/CEu8914F3dY/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/CEu8914F3dY/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 16,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "CEu8914F3dY"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "3ClBhYcp-2EaR1uOYIYXO2KPYMc",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLmtZU213azhpQWs4",
            "snippet": {
                "publishedAt": "2022-10-29T19:17:53Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "The pagination works!: Episode 44, Unhindered by Coding",
                "description": "We got the pagination to work today!\n\nWe changed `RepoPageMap` to be internal state for the paginator. Since that is _only_ used inside the paginator, it made a lot more sense to have it be internal state to the paginator instead of global state in Yewdux. That worked quite nicely, actually.\n\nThen we removed `loaded` from the paginator `State` and use `RepoPageMap::has_loaded_page()` instead. I think we actually want to split out the two remaining parts of the paginator `State` (current page and last page) into separate state objects so they can be managed separately, but that's not a high priority.\n\nWe ended up keeping `repository::DesiredStateMap` as a \"global\" state using Yewdux since that simplified sharing between the paginator and the review-and-submit components. We cleaned up the `use_effect_with_deps` calls, though, to make sure we were resetting everything appropriately, and that took care of the redrawing problems. esitsu@Twitch was a big help in one place where I was hesitating about adding `page_map` to the dependencies, but they were right and that was totally the thing to do!\n\nAlong the way we continued to rename a bunch of functions and variables, as many of the original names don't really make sense anymore.\n\nNow the big thing is to work on actually authenticating and using the Cloudflare tools!\n\nFor the moment (probably through 2022) I'm streaming every Tuesday and Saturday from 10am-noon CDT (https://twitch.tv/NicMcPhee). We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\nI'm also going to be streaming on Twitch on Wednesday nights from 7-9pm CDT and Saturday afternoons from 2-4pm CDT. I'm going to be using those streaming slots to work on implementing an evolutionary computation system in Rust to see what the performance is like, and working on some possible lab exercises in Rust for our Systems Practicum course.\n\nI've also created a Discord server for Unhindered by Coding. There's an invite link QR code in the video, but that's only good for a week. If you stumble across this later and would like to join, let me know in the comments and I can share a working invite link.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/kYSmwk8iAk8/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/kYSmwk8iAk8/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/kYSmwk8iAk8/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/kYSmwk8iAk8/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/kYSmwk8iAk8/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 17,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "kYSmwk8iAk8"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "Cf-VwGozF0YG_9cF0pIbQN6Mnpk",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLkdxVmZuQ3dwVDVv",
            "snippet": {
                "publishedAt": "2022-10-27T15:35:24Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Optimizing lexicase selection in Rust! Episode 43 of Unhindered by Coding",
                "description": "We spent the entire session writing and benchmarking different versions of lexicase selection in Rust, and we definitely improved things over time, although that wasn't entirely obvious by the end of the stream (more below).\n\nI spent about half an hour going over the two implementations of lexicase that we already had (the simple two pass version, and the one that removes all the duplicates) and my initial benchmark results with just those two.\n\nWe then implemented two new versions, both based on the approach in Bill La Cava's Ellyn (https://github.com/cavalab/ellyn) that avoids two passes through the list of candidates. The second of these does some cool stuff to try to minimize memory allocation/deallocation; thanks a ton to esitsu@Twitch for the suggestion for the cool use of `mem::swap()`!\n\nAt the end of the stream, I was fairly surprised that all the results were pretty close to each other, with the `simple` version seeming about as good (or better) than anything else. It seemed that the one that reused vectors to minimize (de)allocation might be the best, but it's really not by much, and whatever win we do have probably comes from the use of `mem::swap()`, which I wouldn't thought about without esitsu's help!\n\nAfter the stream ended I did a bunch of more comprehensive (and time-consuming) benchmarks, and it looks like the one that reused vectors does in fact win, being nearly twice as fast as the `simple` version. I think that the version that removes duplicates is so bad by comparison that it was skewing my view of the results that we were getting during the stream.\n\nNow I'll need to take that back to my evolutionary computation colleagues and see what they think. I'll also try to write all this up as a blog post when I get around to actually setting up a Year of Programming blog! :-)\n\nFor the moment (probably through 2022) I'm streaming at https://twitch.tv/NicMcPhee four times a week:\n\n* Every Tuesday and Saturday from 10am-noon CDT . We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\n* Wednesday nights from 7-9pm CDT, implementing an evolutionary computation system in Rust to see what the performance is like. https://github.com/NicMcPhee/rust-ga\n\n* Saturday afternoons from 2-4pm CDT, working on some possible lab exercises in Rust for our Systems Practicum course.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/GqVfnCwpT5o/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/GqVfnCwpT5o/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/GqVfnCwpT5o/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/GqVfnCwpT5o/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/GqVfnCwpT5o/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 18,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "GqVfnCwpT5o"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "z9cn9MWYsjMI3yOXsg99LgixcHc",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLkJGYjRsX3RpREhF",
            "snippet": {
                "publishedAt": "2022-10-25T19:42:59Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Refactoring state management!: Episode 42, Unhindered by Coding",
                "description": "Back after a 2 week vacation!\n\nThinking about the state of the code some over while I was away, it was clear to me that I'd been mis-using Yewdux global state a lot, and that was messing things up pretty seriously. Whenever you change the organization, for example, you need to reset *all* the global state since everything depends on the specific organization that you're using. By using Yewdux state, we have to reset all that state \"by hand\", when if we were more careful about localizing the state and just passing it to who needs it, we'd have better control.\n\nSo today's stream started the process of fixing that.\n\nWe added a new `AlreadyArchived` variant to the `DesiredState` enum so we could keep track of  and did a bunch of renaming (e.g., ArchiveState to DesiredState).\n\nWe changed things so that the organization is passed in to the paginator as a property instead of being read as a global variable. I think this will mean that we'll get new paginators whenever the organization changes, which is good.\n\nWe moved `PageRepoMap` into its own module, which will hopefully be a useful step to removing it from the global state and making it local to the paginator.\n\nFor the moment (probably through 2022) I'm streaming every Tuesday and Saturday from 10am-noon CDT (https://twitch.tv/NicMcPhee). We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\nI'm also going to be streaming on Twitch on Wednesday nights from 7-9pm CDT and Saturday afternoons from 2-4pm CDT. I'm going to be using those streaming slots to work on implementing an evolutionary computation system in Rust to see what the performance is like, and working on some possible lab exercises in Rust for our Systems Practicum course.\n\nI've also created a Discord server for Unhindered by Coding. There's an invite link QR code in the video, but that's only good for a week. If you stumble across this later and would like to join, let me know in the comments and I can share a working invite link.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/BFb4l_tiDHE/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/BFb4l_tiDHE/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/BFb4l_tiDHE/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/BFb4l_tiDHE/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/BFb4l_tiDHE/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 19,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "BFb4l_tiDHE"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "KQoytnWCRrdzx6X8XDyBIHzKtAY",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLlFIWS02amxLN2kw",
            "snippet": {
                "publishedAt": "2022-10-06T03:07:18Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Implementing lexicase selection in Rust! Episode 41 of Unhindered by Coding",
                "description": "Well, that was interesting. We spent most of this stream implementing lexicase selection in Rust. I had thought I'd be able to do it just using iterators in a nice way, but that went boom because Rust iterators include the closure (the test) as part of their type, so you can't just chain them together in the way that I'd anticipated. I still think there might be a way to do something like this, but I'm definitely not sure how.\n\nSo we just waved a big hammer at it and constructed a bunch of sub-vectors as we went through the different test cases. That works, but it *really* slows things down.\n\nI then tried filtering out duplicate score vectors like the Clojush and Propeller implementations, but that made it worse, especially in the early generations where there are lots of distinct score vectors.\n\nHmph. I'll definitely need to think about this quite a bit more, as we really want lexicase selection to be fast (in Rust), and it's possible that what I learn here can speed things up in other implementations of lexicase as well.\n\nThe code is at https://GitHub.com/NicMcPhee/rust-ga; the `Planning.md` document has more details and ideas for how we might move forward.\n\n=================\n\nThe schedule is gonna be kinda weird in October. In theory I'm sticking to the schedule below, but a trip to visit family are all upending the schedule in various ways. I'm not entirely sure what's going to happen, TBH, but I'll try to keep the schedule on Twitch (@NicMcPhee) up-to-date, and share the state of play on Twitter (@NicMcPhee) and on the Discord (https://discord.gg/ta747E5g). Sorry for the confusion.\n\n=================\n\nFor the moment (probably through September 2022) I'm streaming four times a week:\n\n* Every Tuesday and Saturday from 10am-noon CDT (https://twitch.tv/NicMcPhee). We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\n* Wednesday nights from 7-9pm CDT, implementing an evolutionary computation system in Rust to see what the performance is like. https://github.com/NicMcPhee/rust-ga\n\n* Saturday afternoons from 2-4pm CDT, working on some possible lab exercises in Rust for our Systems Practicum course.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/QHY-6jlK7i0/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/QHY-6jlK7i0/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/QHY-6jlK7i0/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 20,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "QHY-6jlK7i0"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "zlbgaYFF1RX74bS7pXMS0f6DP-8",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLlBxSkZMaDVicjZr",
            "snippet": {
                "publishedAt": "2022-10-05T03:25:26Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Manage pages of repos!: Episode 40, Unhindered by Coding",
                "description": "I realized after the last ice-repos episode that if we went back and forth over the pages of repositories, we were downloading the same pages from GitHub over and over. This didn't seem good, either for us or for GitHub.\n\nSo today's stream started the process of keeping track of each page separately so that we can avoid re-downloading pages. This involved adding a new `PageRepoMap` type, along with a couple of type aliases (`RepoId` and `PageNumber`) to improve readability. There was various other refactoring that went along with that, as that changed what data we had and how we accessed it.\n\nI think this was a significant improvement, except that it broke the project. :-(. To be fair, I think it just revealed a problem that was already there, but it's true that things don't actually work at the moment. :-)\n\nI think we need to add an `AlreadyArchived` variant to our `ArchiveState` type, and update things accordingly. I also think we need to our `use_effects_with_deps` code, as we need to have updates when both the organization changes _and_ when the current page changes, and those updates need to be at least semi-separate. They're currently all muddled together, and I think that's causing us problems with the updates. I think the thing to do is have some \"outer\" component update when the organization changes (which will lead to a redraw of its child components), and then have the paginator _only_ depend on the current page for its updates.\n\nPreviously, we made a `services/archive_repos.rs`, and I think we still want to move a lot (or all) of the existing HTTP code into a service as well, which should help simplify the overly complicated `RepositoryPaginator` component. \n\n=================\n\nThe schedule is gonna be kinda weird in October. In theory I'm sticking to the schedule below, but a trip to visit family means that there will probably be no streaming from Wednesday, 12 Oct, to sometime late in the following week, maybe through the weekend (23 Oct). I'll try to keep the schedule on Twitch (@NicMcPhee) up-to-date, and share the state of play on Twitter (@NicMcPhee) and on the Discord (https://discord.gg/ta747E5g). Sorry for the confusion.\n\n=================\n\nFor the moment (probably through 2022) I'm streaming every Tuesday and Saturday from 10am-noon CDT (https://twitch.tv/NicMcPhee). We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\nI'm also going to be streaming on Twitch on Wednesday nights from 7-9pm CDT and Saturday afternoons from 2-4pm CDT. I'm going to be using those streaming slots to work on implementing an evolutionary computation system in Rust to see what the performance is like, and working on some possible lab exercises in Rust for our Systems Practicum course.\n\nI've also created a Discord server for Unhindered by Coding. There's an invite link QR code in the video, but that's only good for a week. If you stumble across this later and would like to join, let me know in the comments and I can share a working invite link.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/PqJFLh5br6k/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/PqJFLh5br6k/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/PqJFLh5br6k/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/PqJFLh5br6k/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/PqJFLh5br6k/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 21,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "PqJFLh5br6k"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "PQUTHzCBdB5nf50KSxjr0E7EWPc",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLjRSdWNMZnpaQmRF",
            "snippet": {
                "publishedAt": "2022-09-30T17:27:01Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Parsing data packets! Episode 39, part 2, of Unhindered by Coding",
                "description": "For reasons known only to the hardware deities, my computer decided to freeze and reboot right in the middle of this stream. I've spent too long stitching the two halves of the recording together to no avail, so I'm going to post them separately, and this is the second half. Sighz.\n\nWe're using Rust to implement a client that receives a flurry of UDP packets that collectively represent the contents of several files. In last week's stream we wrote the code for parsing the header packets, and in this part of this stream we finish up the code (& tests) for parsing the data packets.\n\nThere's then a kind dull patch where I'm setting up the `main()` using an example from the Tokio docs, and then get lost because I don't remember what port number to connect to.\n\nIt gets potentially interesting again at around 42:15 where I answer a question from dio_solios_@Twitch about my coding background. If you're interested in some info on who I am and why I'm doing this, that would be a place to jump to.\n\nI fixed up the port issue after the stream was over, and I think we're pretty close to done now. Maybe one or at most two more streams, and I think we should have the _client_ finished. I might then work on building a version of the _server_ in Rust (probably as a separate binary in this same project), but we'll see.\n\nSee https://github.com/UMM-CSci-Systems/Segmented-file-system-client for a description of the project as a course lab write-up. Our Rust implementation is at https://github.com/NicMcPhee/rust-segmented-file-client\n\n=================\n\nThe schedule is gonna be kinda weird in the last week of September and October. In theory I'm sticking to the schedule below, but a dental appointment, a local film festival, and a trip to visit family are all upending the schedule in various ways. I'm not entirely sure what's going to happen, TBH, but I'll try to keep the schedule on Twitch (@NicMcPhee) up-to-date, and share the state of play on Twitter (@NicMcPhee) and on the Discord (https://discord.gg/ta747E5g). Sorry for the confusion.\n\n=================\n\nFor the moment (probably through September 2022) I'm going to be streaming on Twitch (https://twitch.tv/NicMcPhee) every Saturday afternoon from 2-4pm CDT with a focus on these kinds of systems projects.\n\nI'm also streaming on Twitch every Tuesday and Saturday from 10am-noon CDT. We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\nLastly, I'm streaming on Twitch on Wednesday nights from 7-9pm CDT working on implementing an evolutionary computation system in Rust, in part to see what the performance is like.\n\nI've also created a Discord server for Unhindered by Coding. There's an invite link QR code in the video, but that's only good for a week. If you stumble across this later and would like to join, let me know in the comments and I can share a working invite link.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/4RucLfzZBdE/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/4RucLfzZBdE/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/4RucLfzZBdE/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/4RucLfzZBdE/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/4RucLfzZBdE/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 22,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "4RucLfzZBdE"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "goC4EiRADpgQFv2RgqA8N12v-gA",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLkpCdkVPaUUzU3J3",
            "snippet": {
                "publishedAt": "2022-09-30T17:18:42Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Parsing data packets! Episode 39, part 1, of Unhindered by Coding",
                "description": "For reasons known only to the hardware deities, my computer decided to freeze and reboot right in the middle of this stream. I've spent too long stitching the two halves of the recording together to no avail, so I'm going to post them separately, with this being the first half. Sighz.\n\nWe're using Rust to implement a client that receives a flurry of UDP packets that collectively represent the contents of several files. In last week's stream we wrote the code for parsing the header packets, and in this part of this stream we wrote the code (& tests) for parsing the data packets.\n\nThere's a lengthy discussion at the end about alternatives to standard `if-then-else` statements using `.then()` and `.or_else`. I didn't end up replacing my `if-then-else`, but it was certainly interesting to see the alternative approach. In doing that I learned about the `.not()` operator, which I actually prefer to `!` in some cases, especially since `!` is also used to indicate macro-ness. Thanks to Wgaffa@Twitch for the suggestions and ideas.\n\nSee https://github.com/UMM-CSci-Systems/Segmented-file-system-client for a description of the project as a course lab write-up. Our Rust implementation is at https://github.com/NicMcPhee/rust-segmented-file-client\n\n=================\n\nThe schedule is gonna be kinda weird in the last week of September and October. In theory I'm sticking to the schedule below, but a dental appointment, a local film festival, and a trip to visit family are all upending the schedule in various ways. I'm not entirely sure what's going to happen, TBH, but I'll try to keep the schedule on Twitch (@NicMcPhee) up-to-date, and share the state of play on Twitter (@NicMcPhee) and on the Discord (https://discord.gg/ta747E5g). Sorry for the confusion.\n\n=================\n\nFor the moment (probably through September 2022) I'm going to be streaming on Twitch (https://twitch.tv/NicMcPhee) every Saturday afternoon from 2-4pm CDT with a focus on these kinds of systems projects.\n\nI'm also streaming on Twitch every Tuesday and Saturday from 10am-noon CDT. We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\nLastly, I'm streaming on Twitch on Wednesday nights from 7-9pm CDT working on implementing an evolutionary computation system in Rust, in part to see what the performance is like.\n\nI've also created a Discord server for Unhindered by Coding. There's an invite link QR code in the video, but that's only good for a week. If you stumble across this later and would like to join, let me know in the comments and I can share a working invite link.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/JBvEOiE3Srw/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/JBvEOiE3Srw/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/JBvEOiE3Srw/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 23,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "JBvEOiE3Srw"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "q8vq2PvdBHb0GIEGSgPqmdvcq_A",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLkVVSC1RMzl6cFYw",
            "snippet": {
                "publishedAt": "2022-09-29T02:37:37Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Weighted selection & vectors scores in Evol Computation in Rust! Episode 38 of Unhindered by Coding",
                "description": "After last week's stream, I added support for command-line arguments using the `clap` crate, so I started tonight by going over that briefly.\n\nI then implemented weighted selection, using esitsu@Twitch's excellent suggestion of using the `choose_weighted` method from `SliceRandom`. This substantially improved the performance of the system, at least on problems like HIFF.\n\nThen, at esitsu's fine suggestion, we implemented the `Display` trait for `Individual`s of `Bitstring`s so they print out as 0s and 1s instead of `true`s and `false`s, which makes them much easier to read.\n\nLastly, I wanted to get us going on the implementation of lexicase selection. There are probably cleaner ways to go about this (e.g., having a generic score type on `Individual`), but I went with just adding a `Vec` of scores along with a `total_score` for each individual. This rippled all over the place, but really wasn't that bad to fix, with the compiler guiding me to all the places where I had to change things.\n\nWe now have all that infrastructure in place so that we can actually implement lexicase selection next week!\n\nThe code is at https://GitHub.com/NicMcPhee/rust-ga; the `Planning.md` document has more details and ideas for how we might move forward.\n\n=================\n\nThe schedule is gonna be kinda weird in the last week of September and October. In theory I'm sticking to the schedule below, but a dental appointment, a local film festival, and a trip to visit family are all upending the schedule in various ways. I'm not entirely sure what's going to happen, TBH, but I'll try to keep the schedule on Twitch (@NicMcPhee) up-to-date, and share the state of play on Twitter (@NicMcPhee) and on the Discord (https://discord.gg/ta747E5g). Sorry for the confusion.\n\n=================\n\nFor the moment (probably through September 2022) I'm streaming four times a week:\n\n* Every Tuesday and Saturday from 10am-noon CDT (https://twitch.tv/NicMcPhee). We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\n* Wednesday nights from 7-9pm CDT, implementing an evolutionary computation system in Rust to see what the performance is like. https://github.com/NicMcPhee/rust-ga\n\n* Saturday afternoons from 2-4pm CDT, working on some possible lab exercises in Rust for our Systems Practicum course.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/EUH-Q39zpV0/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/EUH-Q39zpV0/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/EUH-Q39zpV0/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/EUH-Q39zpV0/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/EUH-Q39zpV0/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 24,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "EUH-Q39zpV0"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "sCF-tU-y7HHkLdip1_qNVeK7WN0",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLlRBRlBQeFc4elZz",
            "snippet": {
                "publishedAt": "2022-09-28T18:45:53Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Finish review & submit UI!: Episode 37, Unhindered by Coding",
                "description": "We finished at least the UI for the `ReviewAndSubmit` component today, and then got part way into changing the pagination to use \"Prev\"/\"Next\" instead of page numbers.\n\nWe got the UI for the `ReviewAndSubmit` sorted out today, with a (too) big \"Archive\" button and a warning about the consequences of hitting it. We also did some refactoring so we can re-use `RepositoryList` in `ReviewAndSubmit` instead of repeating that logic. This highlighted a gap in the previous work, where we hadn't displayed anything if there were no selected archives.\n\nWe made a `services/archive_repos.rs`. This currently just contains a stub for the `archive_repositories` method that only logs the intent to archive that repository. We won't be able to actually implement that until we have all the OAuth stuff in place.\n\nWe probably want to move a lot (or all) of the existing HTTP code into a service as well, which should help simplify the overly complicated `RepositoryPaginator` component. \n\nWe then moved to changing the pagination UI from listing all the page numbers to a \"Prev\"/\"Next\" interface. We got a good start on that, but then got bogged down in some cloning faff and that will need to be addressed when we next work on this.\n\n=================\n\nThe schedule is gonna be kinda weird in the last week of September and October. In theory I'm sticking to the schedule below, but a dental appointment, a local film festival, and a trip to visit family are all upending the schedule in various ways. I'm not entirely sure what's going to happen, TBH, but I'll try to keep the schedule on Twitch (@NicMcPhee) up-to-date, and share the state of play on Twitter (@NicMcPhee) and on the Discord (https://discord.gg/ta747E5g). Sorry for the confusion.\n\n=================\n\nFor the moment (probably through September 2022) I'm streaming every Tuesday and Saturday from 10am-noon CDT (https://twitch.tv/NicMcPhee). We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\nI'm also going to be streaming on Twitch on Wednesday nights from 7-9pm CDT and Saturday afternoons from 2-4pm CDT. I'm going to be using those streaming slots to work on implementing an evolutionary computation system in Rust to see what the performance is like, and working on some possible lab exercises in Rust for our Systems Practicum course.\n\nI've also created a Discord server for Unhindered by Coding. There's an invite link QR code in the video, but that's only good for a week. If you stumble across this later and would like to join, let me know in the comments and I can share a working invite link.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/TAFPPxW8zVs/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/TAFPPxW8zVs/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/TAFPPxW8zVs/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/TAFPPxW8zVs/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/TAFPPxW8zVs/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 25,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "TAFPPxW8zVs"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "2Tk0ZRaM6wSWvtv0BJqt1OTQ9Rw",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLmxFVlA2LWV1ajBZ",
            "snippet": {
                "publishedAt": "2022-09-24T22:12:18Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Episode 36: Parsing UDP packets!",
                "description": "I felt like we had basically sorted out the echo client-server project last week, so this week we started a new project!\n\nWe're using Rust to implement a client that receives a flurry of UDP packets that collectively represent the contents of several files. The client has to collect the packets, realize when it has them all, organize and order them, and then write out the resulting files. See https://github.com/UMM-CSci-Systems/Segmented-file-system-client for a description of the project as a course lab write-up. Our Rust implementation is at https://github.com/NicMcPhee/rust-segmented-file-client\n\nWe started with some tools to parse the different packet structures. I really like how Rust enums and `TryFrom` traits are working here, as well as using `Result` types to have more useful error handling. We're also writing tests as we go. Not actually TDD (so far we've written the tests after the fact), but it's nice having the tests there to support the conversions. One way we could support/guide the students if we turn this into a lab is we could give them the unit tests; I'm guessing that the tests plus all the info implied by the type system would provide a lot of structure to the lab.\n\nAnd I learned how to write tests that check for assertions! Thanks to the ever-helpful esitsu@Twitch for pointing me at the right tools there, and numerous other helpful suggestions!\n\n=================\n\nThe schedule is gonna be kinda weird in the last week of September and October. In theory I'm sticking to the schedule below, but a dental appointment, a local film festival, and a trip to visit family are all upending the schedule in various ways. I'm not entirely sure what's going to happen, TBH, but I'll try to keep the schedule on Twitch (@NicMcPhee) up-to-date, and share the state of play on Twitter (@NicMcPhee) and on the Discord (https://discord.gg/ta747E5g). Sorry for the confusion.\n\n=================\n\nFor the moment (probably through September 2022) I'm going to be streaming on Twitch (https://twitch.tv/NicMcPhee) every Saturday afternoon from 2-4pm CDT with a focus on these kinds of systems projects.\n\nI'm also streaming on Twitch every Tuesday and Saturday from 10am-noon CDT. We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\nLastly, I'm streaming on Twitch on Wednesday nights from 7-9pm CDT working on implementing an evolutionary computation system in Rust, in part to see what the performance is like.\n\nI've also created a Discord server for Unhindered by Coding. There's an invite link QR code in the video, but that's only good for a week. If you stumble across this later and would like to join, let me know in the comments and I can share a working invite link.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/lEVP6-euj0Y/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/lEVP6-euj0Y/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/lEVP6-euj0Y/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 26,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "lEVP6-euj0Y"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "foJjkySESfxQQikI_IPIYXC-L1w",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLkh5QVNDT3lZQmtF",
            "snippet": {
                "publishedAt": "2022-09-24T22:04:29Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Episode 35: Refactoring boolean archive state to an enum!",
                "description": "Today was quite nifty. We needed to change the UI for the \"Review & Submit\" component so that could review the repositories that had been marked for archiving, but still provide a way to uncheck/recheck those that had been selected in the first pass. We had been just keeping track of a single boolean for archive vs. don't-archive, and we expanded that to a proper enum with three states: Archive (saying we want to archive this repo), Skip (saying we chose to not archive this repo in the initial pass through in the pagination component), and SkippedInReview to indicate that we'd unchecked a repo in the \"Review & Submit\" component.\n\nThis made me happy on several levels. I wasn't super thrilled about the raw `bool` in `ArchiveStateMap`, and this now gives us a named, domain specific `ArchiveState` type. We were also able to add some context specific conversion methods to convert the boolean state of a checkbox into an appropriate `ArchiveState` value depending on whether we're in the pagination or the review-and-submit components.\n\nChanging the `bool` to `ArchiveState` in ArchiveStateMap` then pushed out errors to the various places we had to update because of this change, and there really weren't many.\n\nesitsu@Twitch gets _loads_ of credit for the structure of this refactoring. They recommended pretty much all the key parts of this, which was really excellent.\n\nThis largely resolves the Review & Submit component, although it needs a bit \"Archive the selected repos!\" button, and logic to back that up. We also need to create some kind of frame around the Review & Submit component, because it's currently just floating on a page on its own. Lastly, we need to change the pagination UI to use the prev/next design proposed by esitsu@Twitch.\n\n=================\n\nThe schedule is gonna be kinda weird in the last week of September and October. In theory I'm sticking to the schedule below, but a dental appointment, a local film festival, and a trip to visit family are all upending the schedule in various ways. I'm not entirely sure what's going to happen, TBH, but I'll try to keep the schedule on Twitch (@NicMcPhee) up-to-date, and share the state of play on Twitter (@NicMcPhee) and on the Discord (https://discord.gg/ta747E5g). Sorry for the confusion.\n\n=================\n\nFor the moment (probably through September 2022) I'm streaming every Tuesday and Saturday from 10am-noon CDT (https://twitch.tv/NicMcPhee). We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\nI'm also going to be streaming on Twitch on Wednesday nights from 7-9pm CDT and Saturday afternoons from 2-4pm CDT. I'm going to be using those streaming slots to work on implementing an evolutionary computation system in Rust to see what the performance is like, and working on some possible lab exercises in Rust for our Systems Practicum course.\n\nI've also created a Discord server for Unhindered by Coding. There's an invite link QR code in the video, but that's only good for a week. If you stumble across this later and would like to join, let me know in the comments and I can share a working invite link.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/HyASCOyYBkE/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/HyASCOyYBkE/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/HyASCOyYBkE/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/HyASCOyYBkE/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/HyASCOyYBkE/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 27,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "HyASCOyYBkE"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "JJJ1EHoYIx2rhY1xTjxxdWpZ9C4",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLlNERXVxTjJ5eU13",
            "snippet": {
                "publishedAt": "2022-09-22T04:14:22Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Episode 34: Evolutionary Computation in Rust! Creating a `Generation` type!",
                "description": "I had realized after last week's stream that the `ParentSelector` logic could really be moved into `Population` and we wouldn't need the new type. After explaining that, `esitsu@Twitch` suggested moving the `ParentSelector` logic into a new `Generation` type, which would then have a `next()` method to generate the next generation from the current one. We then spent pretty much the entire stream implementing this (good) idea.\n\nMost of it was pretty straightforward, but we got really bogged down at\nthe end because of a problem with the Rust compiler's understanding of a\nclosure's types. `esitsu` also had a really cool idea of extracting the bit string specific parts of the `next` generation logic into a closure that we'd pass in when we construct the generation. This worked, but I didn't explicitly type the arguments to the closure initially, and that let to all kinds of weird confusion. We flailed pretty hard trying to resolve the issues, doing all sorts of things with lifetimes. In the end it turned out that all we _really_ needed to do was explicitly type that closure, and once we did that everything worked.\n\nAfter the stream ended I removed the `next_generation()` logic and\n`ParentSelector` type from `Population`, moving the former into\n`Generation` and deleting the latter altogether.\n\nHuge thanks to esitsu@Twitch for all the suggestions and ideas!\n\nThe code is at https://GitHub.com/NicMcPhee/rust-ga; the `Planning.md` document has more details and ideas for how we might move forward.\n\nFor the moment (probably through September 2022) I'm streaming four times a week:\n\n* Every Tuesday and Saturday from 10am-noon CDT (https://twitch.tv/NicMcPhee). We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\n* Wednesday nights from 7-9pm CDT, implementing an evolutionary computation system in Rust to see what the performance is like. https://github.com/NicMcPhee/rust-ga\n\n* Saturday afternoons from 2-4pm CDT, working on some possible lab exercises in Rust for our Systems Practicum course.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/SDEuqN2yyMw/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/SDEuqN2yyMw/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/SDEuqN2yyMw/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/SDEuqN2yyMw/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/SDEuqN2yyMw/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 28,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "SDEuqN2yyMw"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "DVGaH3fqMZKIMe6oZ0d4qnh2YEQ",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLnJRTm1fcjlXbjlF",
            "snippet": {
                "publishedAt": "2022-09-20T18:45:48Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Episode 33: Eeek! OAuth problems! Most of ReviewAndSubmit component",
                "description": "As we were clearly getting close to to needing to do authenticated things (actually archiving repos), I spent some time looking into how we'd do that and it got weird. GitHub really wants you to do use their GitHub App setup _or_ have an external server, and I really didn't want to do either.\n\nWe spent about half an hour discussing the options, which seem to me to be three:\n\n* GitHub App – Must be connect to org by admin; probably easy to authenticate (no server)\n* GitHub OAuth w/ device flow – individual authentication, no server, only 50 submissions per hour\n* GitHub OAuth w/ Cloudflare – individual authentication, (hopefully) simple server, 100K/day free requests\n\nBased on that discussion I'm currently leaning towards the last approach. It's a little more infrastructure than I intended, but I'm never likely to hit 100K request in a day and I think the server code should be really simple. They have support for Rust/WASM code, so we should be able to write the server in Rust and stay in the same universe. I think I could even make that a separate binary in the same repo, which would be nifty.\n\nAfter that lengthy discussion, we started building out the (final?) ReviewAndSubmit component. We got the basic functionality working, but there are some look-and-feel and functionality pieces still to resolve.\n\nesitsu@Twitch suggested a potentially useful/important change to the UI that we'll need to consider. Currently we have a bunch of buttons, one for each page of repos. @Esitsu's idea is to _just_ have \"Prev\"/\"Next\" so they _have_ to go through the repos in order (which will simplify avoiding repetitious calls to GitHub). The \"Next\" would turn into \"Review & Submit\" when we get the last page. This will ensure that we've loaded every page by the time that we get there, and reduce the likelihood of surprising results.\n\nI learned about `bool.then_some()` today from @esitsu, which was really cool, and there were numerous other places where folks shared helpful tips and suggestions when I was stuck.\n\nWe switched from `HashMap` to `BTreeMap` for the storage of repos and their desired state. `BTreeMap` keeps things sorted by key, which works nicely here since (I _think_) the GitHub IDs (which we're using for keys) are numeric in increasing order as repos are created.\n\nFor the moment (probably through September 2022) I'm streaming every Tuesday and Saturday from 10am-noon CDT (https://twitch.tv/NicMcPhee). We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\nI'm also going to be streaming on Twitch on Wednesday nights from 7-9pm CDT and Saturday afternoons from 2-4pm CDT. I'm going to be using those streaming slots to work on implementing an evolutionary computation system in Rust to see what the performance is like, and working on some possible lab exercises in Rust for our Systems Practicum course.\n\nI've also created a Discord server for Unhindered by Coding. There's an invite link QR code in the video, but that's only good for a week. If you stumble across this later and would like to join, let me know in the comments and I can share a working invite link.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/rQNm_r9Wn9E/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/rQNm_r9Wn9E/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/rQNm_r9Wn9E/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/rQNm_r9Wn9E/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/rQNm_r9Wn9E/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 29,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "rQNm_r9Wn9E"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "IJNpnzxceH_dMV5SxiLSs7zsfpA",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLllrV3N3X2Jlc3k0",
            "snippet": {
                "publishedAt": "2022-09-17T22:24:27Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Episode 32: Restructure and implement the echo client! CLAP!",
                "description": "We started by restructuring the app so that instead of two independent projects side-by-side in the same repository, this is now a single project with two binary crates.\n\nWe then implemented the echo client, which was pretty straightforward, although we didn't do any of the nifty error handling using `error-stack` that we did for the server. I also didn't thread the client, as I'm not sure I'd learn much by doing that.\n\nWe did add the `clap` crate for command-line argument parsing, though, allowing the user to specify either of the IP and/or port that you want to listen on/communicate with. Mostly just so I'd understand it, we moved the (limited) shared code for `clap` into a new `lib` crate, so this project now has three crates. :)\n\nThis week we finished adding the error handling with the `error-stack` crate, and used `env_logging` to add some simple logging to the echo server!\n\nThis essentially is a wrap on the echo client-server project, and I'll have to come up with a new systems project for next Saturday's afternoon session.\n\nThere's also no testing at the moment, although we could use variations on the existing `bats` tests to extend that. We might be able to mock some of the Tokio responses, although I'm not sure how complicated that would be.\n\n*Tons* of great help and suggestions from esitsu@Twitch and Wgaffa@Twitch, and I am super grateful for their contributions.\n\nFor the moment (probably through September 2022) I'm going to be streaming on Twitch (https://twitch.tv/NicMcPhee) every Saturday afternoon from 2-4pm CDT with a focus on these kinds of systems projects.\n\nI'm also streaming on Twitch every Tuesday and Saturday from 10am-noon CDT. We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\nLastly, I'm streaming on Twitch on Wednesday nights from 7-9pm CDT working on implementing an evolutionary computation system in Rust, in part to see what the performance is like.\n\nI've also created a Discord server for Unhindered by Coding. There's an invite link QR code in the video, but that's only good for a week. If you stumble across this later and would like to join, let me know in the comments and I can share a working invite link.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/YkWsw_besy4/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/YkWsw_besy4/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/YkWsw_besy4/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/YkWsw_besy4/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/YkWsw_besy4/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 30,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "YkWsw_besy4"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "SSUSE4hTRNtRRcXsu4T9BWJP7Ys",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLkMxb0RmaElRU2pr",
            "snippet": {
                "publishedAt": "2022-09-17T17:48:46Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Episode 31: Switching to Yewdux!",
                "description": "On Tuesday we'd started the process of switching to using Yewdux to manage our state across the app, and today we finished that!\n\nI'd been rather hesitant to switch to Yewdux because I really don't like global state (or global anything, TBH) as that's just a good way to lose all sense of discipline and do Ungreat Things.\n\nThat said, I'm really happy with how this worked out. Using Yewdux was quite pleasant, with only one surprise (more in a second), and it really helped reduce the amount of `clone()`ing we were doing of `String`s and `HashMap`s. The cloning is now mostly of `Rc`s or things that wrap `Rc`s, so it's quite cheap and well behaved.\n\nI think that we're not ready to create the Submit page that will let the user review their choices and hit the big \"Submit\" button that should cause the app to make all the archive requests to GitHub.\n\nFor the moment (probably through September 2022) I'm streaming every Tuesday and Saturday from 10am-noon CDT (https://twitch.tv/NicMcPhee). We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\nI'm also going to be streaming on Twitch on Wednesday nights from 7-9pm CDT and Saturday afternoons from 2-4pm CDT. I'm going to be using those streaming slots to work on implementing an evolutionary computation system in Rust to see what the performance is like, and working on some possible lab exercises in Rust for our Systems Practicum course.\n\nI've also created a Discord server for Unhindered by Coding. There's an invite link QR code in the video, but that's only good for a week. If you stumble across this later and would like to join, let me know in the comments and I can share a working invite link.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/C1oDfhIQSjk/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/C1oDfhIQSjk/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/C1oDfhIQSjk/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 31,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "C1oDfhIQSjk"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "TYe-4xGkC3sXmh4a4mTqlC0UdQg",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLmh0NG5PQUJZQ253",
            "snippet": {
                "publishedAt": "2022-09-15T03:05:54Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Episode 30: Evolutionary Computation in Rust! Adding iterators, and then removing them again.",
                "description": "We got back into the evolutionary computation work tonight, ultimately doing a nice job of providing a flexible mechanism for specifying selection operators.\n\nWe started by writing a function that took a vector of selectors (functions that take a population and return an individual) and turn that it into an iterator of individuals (parents for the next generation). That got into some weird stuff because it ended up encapsulating the random number generator, which made sharing it across threads impossible.\n\nSo we created a new `ParentSelector` train whose `get(rng)` method is similar to the `Iterator::next()` method, but it takes the random number generator as an argument. This avoids the encapsulation issue and cleans up the parallelism somewhat. I might see on the Rust user forum if someone else has a better idea. What we have works, but it's a minor bummer that we're no longer able to take advantage of all the goodies that `Iterator` provides.\n\nWe currently choose selection operators uniformly, which isn't great. (We choose the best as often as a random, which doesn't make much sense.) We need to change this so that we provide a weighted list of selection operators, so we can choose some more than others. I think there's a crate for making random selections from a weighted list, so I should look into that.\n\nHuge thanks to esitsu@Twitch for all the suggestions and ideas!\n\nFor the moment (probably through September 2022) I'm streaming four times a week:\n\n* Every Tuesday and Saturday from 10am-noon CDT (https://twitch.tv/NicMcPhee). We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\n* Wednesday nights from 7-9pm CDT, implementing an evolutionary computation system in Rust to see what the performance is like. https://github.com/NicMcPhee/rust-ga\n\n* Saturday afternoons from 2-4pm CDT, working on some possible lab exercises in Rust for our Systems Practicum course.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/ht4nOABYCnw/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/ht4nOABYCnw/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/ht4nOABYCnw/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/ht4nOABYCnw/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/ht4nOABYCnw/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 32,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "ht4nOABYCnw"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "ZjxZmg2DS2WpWldRZTGye3sEH-k",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLkozVzQxMV9OQUZJ",
            "snippet": {
                "publishedAt": "2022-09-13T18:08:22Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Episode 29: Switching to Yewdux?",
                "description": "We spent a lot of time wrestling with the problem with the state update from last time, only to eventually realize (thanks to esitsu@Twitch and Wgaffa@Twitch) that it had probably been working all along!\n\nWe then moved on to the creation of the \"Submit\" component, and got bogged down in the question of how to pass state from the selection components to the submit component. After a lot of reading and thinking, I initially played with Yew's `context`, but ended up switching to Yewdux since I think it may be easier to set and modify state that way. It's all super global that way, which is kinda annoying, but this app is simple enough that having everything be in a single global state won't hurt too bad.\n\nWe got a start on bringing Yewdux, and it seems pretty plausible based on our initial work. Hopefully we can finish that transition in Saturday morning's stream.\n\nFor the moment (probably through September 2022) I'm streaming every Tuesday and Saturday from 10am-noon CDT (https://twitch.tv/NicMcPhee). We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\nI'm also going to be streaming on Twitch on Wednesday nights from 7-9pm CDT and Saturday afternoons from 2-4pm CDT. I'm going to be using those streaming slots to work on implementing an evolutionary computation system in Rust to see what the performance is like, and working on some possible lab exercises in Rust for our Systems Practicum course.\n\nI've also created a Discord server for Unhindered by Coding. There's an invite link QR code in the video, but that's only good for a week. If you stumble across this later and would like to join, let me know in the comments and I can share a working invite link.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/J3W411_NAFI/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/J3W411_NAFI/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/J3W411_NAFI/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/J3W411_NAFI/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/J3W411_NAFI/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 33,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "J3W411_NAFI"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "sJpw1TfXDc0MOUFbTbza8tffzw0",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLm5kRlVIMl9zUkUw",
            "snippet": {
                "publishedAt": "2022-09-10T22:16:28Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Episode 28: Finish error handling and add logging to the echo server",
                "description": "This week we finished adding the error handling with the `error-stack` crate, and used `env_logging` to add some simple logging to the echo server!\n\nWe used enums in a nice way to handle two separate (but closely related) error cases when reading from/writing to the socket.\n\nWe spent a lot of time on the logging, and I'm still not convinced I have a very clear sense of how one might best connect `error-stack` errors to a logging system. Just printing them with something like `error!({err:?})` works, but doesn't generate the prettiest logging output (e.g., it won't be super easy to parse). I think we could extract the frame info from the `error-stack` report and format our own error report, but that seems like rather a lot of work for minimal reward.\n\nI tried \"forcing\" an I/O error in the code that reads from and writes to the socket, but it turns out that didn't work, so I'm really not sure how I can generate one of those errors. Maybe some kind of mocking system would be useful/necessary?\n\nThere's also no testing at the moment, although we could use variations on the existing `bats` tests to extend that. We might be able to mock some of the Tokio responses, although I'm not sure how complicated that would be.\n\n*Tons* of great help and suggestions from esitsu@Twitch and Wgaffa@Twitch, and I am super grateful for their contributions.\n\nFor the moment (probably through September 2022) I'm going to be streaming on Twitch (https://twitch.tv/NicMcPhee) every Saturday afternoon from 2-4pm CDT with a focus on these kinds of systems projects.\n\nI'm also streaming on Twitch every Tuesday and Saturday from 10am-noon CDT. We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\nLastly, I'm streaming on Twitch on Wednesday nights from 7-9pm CDT working on implementing an evolutionary computation system in Rust, in part to see what the performance is like.\n\nI've also created a Discord server for Unhindered by Coding. There's an invite link QR code in the video, but that's only good for a week. If you stumble across this later and would like to join, let me know in the comments and I can share a working invite link.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/ndFUH2_sRE0/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/ndFUH2_sRE0/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/ndFUH2_sRE0/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/ndFUH2_sRE0/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/ndFUH2_sRE0/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 34,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "ndFUH2_sRE0"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "RTjngRnPBraPGlXXbUemXy_eDSI",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLlRaVkxnWEFnY1RF",
            "snippet": {
                "publishedAt": "2022-09-08T04:26:42Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Episode 27: Evolutionary Computation in Rust! Higher-Rank Trait Bounds!",
                "description": "We got back into the evolutionary computation work tonight, separating out the bit manipulation from the scoring, and getting quite bogged down in pulling out the selection operators so they're parameters instead of baked in.\n\nWe started by doing some interesting work in creating traits for both crossover and mutation operators. It turns out that the crossover operators don't care about the kinds of things in the vectors, so they were put in a different trait from the mutation operators, which _do_ care about what type is in the vectors since we can't mutate things without knowing what they are.\n\nSo I made my first traits! & provided implementations of them, which was quite fun.\n\nThen we separated out the bit manipulation from the scoring in a pretty nice way, which I suspect will have substantially speeded up the system.\n\nAfter that, we got deep in the swamp of trying to extract the logic for selecting parents so that users can specify that dynamically in their config code. At the moment we have some fragments that compile and I _think_ can form the basis of a working system, although TBH I don't fully understand some of what we have and asked some questions about that over on the Discord (https://discord.gg/kaeTCrB3).\n\nThere's also a pretty complicated set of questions coming up about how we deal with pipelines of genetic operators (combinations of things like crossover and mutation operators) in Rust, which I've tried to explain over on the Discord as well.\n\nHuge thanks to esitsu@Twitch for all the suggestions and ideas!\n\nNote that I've cancelled the Saturday morning (10 Sep, 10-noon) ice-repos stream so I can attend our monthly climate group meeting, but all the rest should be good for this week.\n\nFor the moment (probably through September 2022) I'm streaming four times a week:\n\n* Every Tuesday and Saturday from 10am-noon CDT (https://twitch.tv/NicMcPhee). We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\n* Wednesday nights from 7-9pm CDT, implementing an evolutionary computation system in Rust to see what the performance is like. https://github.com/NicMcPhee/rust-ga\n\n* Saturday afternoons from 2-4pm CDT, working on some possible lab exercises in Rust for our Systems Practicum course.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/TZVLgXAgcTE/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/TZVLgXAgcTE/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/TZVLgXAgcTE/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/TZVLgXAgcTE/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/TZVLgXAgcTE/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 35,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "TZVLgXAgcTE"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "KPVBM0VkcPh03KmuCCmVOk4r3iA",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLnVYQWxoTTZ6ZEI0",
            "snippet": {
                "publishedAt": "2022-09-06T17:51:11Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Episode 26: Continue to wrestle with desired archive state in ice-repos",
                "description": "A day full of false hope and great participation. :-) Several times I felt like we were close to having the checkboxes and their state work, only to find that life was again more complicated than anticipated. I do feel like we're close, but we're still having problems managing and updating the state properly.\n\nThe problem might be from an experiment; we tried passing a Yew `UseStateHandle` in as a component property, but in retrospect that might not have been a great choice. We might have a problem where we're not updating a reference properly because of this, but we'll have to see next week when we next work on this.\n\nThere was lots of excellent participation today, with quite a few people contributing in valuable ways. The section where I was figuring out how to best update a HashMap entry was a great example of the value of having a fine group of folks sharing ideas.\n\nI WON'T BE STREAMING SATURDAY MORNING (10 Sep) because of a conflict with another event. I will be doing all my other scheduled streams this week.\n\nFor the moment (probably through September 2022) I'm streaming every Tuesday and Saturday from 10am-noon CDT (https://twitch.tv/NicMcPhee). We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\nI'm also going to be streaming on Twitch on Wednesday nights from 7-9pm CDT and Saturday afternoons from 2-4pm CDT. I'm going to be using those streaming slots to work on implementing an evolutionary computation system in Rust to see what the performance is like, and working on some possible lab exercises in Rust for our Systems Practicum course.\n\nI've also created a Discord server for Unhindered by Coding. There's an invite link QR code in the video, but that's only good for a week. If you stumble across this later and would like to join, let me know in the comments and I can share a working invite link.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/uXAlhM6zdB4/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/uXAlhM6zdB4/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/uXAlhM6zdB4/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/uXAlhM6zdB4/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/uXAlhM6zdB4/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 36,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "uXAlhM6zdB4"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "DkO-N7xGGKNNcu81ra1Ax09EnUk",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLjlsTnBYeVAtMXpV",
            "snippet": {
                "publishedAt": "2022-09-03T21:50:18Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Episode 25: Experiment with error-stack with an echo server",
                "description": "Last week we implemented a simple, threaded echo server in Rust using Tokio for the threading. There were numerous places where that code could generate errors, and we really didn't deal with any of them in a meaningful way. So this week I wanted to experiment with the error-stack crate and see what it would be like to use it to provide a somewhat more useful error handling system.\n\nI got turned around at the start and created an overly complex error type, but luckily esitsu@Twitch and Wgaffa@Twitch helped get me pointed in the right direction and *substantially* simplied the code as a result.\n\nWe now have all the basic binding and connection errors sorted out, and the next step is to handle I/O errors that occur while we're reading from and writing to the socket. Hopefully that won't take _too_ long, and then we can move to logging and command line arguments, and then (eventually) implementing the client as well.\n\nThere's also no testing at the moment, although we could use variations on the existing `bats` tests to extend that. We might be able to mock some of the Tokio responses, although I'm not sure how complicated that would be.\n\nFor the moment (probably through September 2022) I'm going to be streaming on Twitch (https://twitch.tv/NicMcPhee) every Saturday afternoon from 2-4pm CDT with a focus on these kinds of systems projects.\n\nI'm also streaming on Twitch every Tuesday and Saturday from 10am-noon CDT. We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\nLastly, I'm streaming on Twitch on Wednesday nights from 7-9pm CDT working on implementing an evolutionary computation system in Rust, in part to see what the performance is like.\n\nI've also created a Discord server for Unhindered by Coding. There's an invite link QR code in the video, but that's only good for a week. If you stumble across this later and would like to join, let me know in the comments and I can share a working invite link.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/9lNpXyP-1zU/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/9lNpXyP-1zU/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/9lNpXyP-1zU/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 37,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "9lNpXyP-1zU"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "wri-hnDELkkJVE-Im0VX-eDNJYo",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLm84cDdjNnVtRmZj",
            "snippet": {
                "publishedAt": "2022-09-03T17:48:15Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Episode 24: Sort out archived state",
                "description": "After adding checkboxes on Tuesday morning, today we got the paginator state sorted so we can (hopefully) track the desired archival state of each repository.\n\nWe moved `ArchiveStateMap` out of the paginator `State`, and modified that map to have `(Repository, bool)` as the values so we will have access to the full `Repository` object later when we need it.\n\nThere's still vast oceans of cloning that I can't imagine is a Good Thing. I think we'll either need to use Yew's context hook, or wrap things like the `ArchiveStateMap::map` in an `Rc` (or `Arc`?) so that we don't have to clone the contents all the time.\n\nBig thanks to esitsu@Twitch and Wgaffa@Twitch for a lot of useful advice and support in today's stream.\n\nWe still don't have the state updating when people click checkboxes, but hopefully we'll be able to deal with that fairly quickly in Tuesday morning's stream.\n\nFor the moment (probably through September 2022) I'm streaming every Tuesday and Saturday from 10am-noon CDT (https://twitch.tv/NicMcPhee). We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\nI'm also going to be streaming on Twitch on Wednesday nights from 7-9pm CDT and Saturday afternoons from 2-4pm CDT. I'm going to be using those streaming slots to work on implementing an evolutionary computation system in Rust to see what the performance is like, and working on some possible lab exercises in Rust for our Systems Practicum course.\n\nI've also created a Discord server for Unhindered by Coding. There's an invite link QR code in the video, but that's only good for a week. If you stumble across this later and would like to join, let me know in the comments and I can share a working invite link.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/o8p7c6umFfc/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/o8p7c6umFfc/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/o8p7c6umFfc/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 38,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "o8p7c6umFfc"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "KCB72zwDqau1bfsSmaNmHGF8XLc",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLnlmcjRSUkptWWFn",
            "snippet": {
                "publishedAt": "2022-08-30T17:58:13Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Episode 23: Add checkboxes to ice-repos!",
                "description": "After mostly refactoring on Saturday morning, today we actually (finally!) got around to adding checkboxes to our repos!\n\nI started with a little formatting work using Tailwinds CSS and DaisyUI, and improved the layout of the repos a little bit. I then used DaisyUI to add checkboxes, which let to the somewhat complex question of what to *do* when a checkbox was clicked.\n\nAfter some considerable thought and discussion (thanks esitsu@Twich!) we got the checkbox events bubbled up to the `RepositoryPaginator` component, at least to the level of being successfully shared via `console.log`.\n\nThis raised the question of what and how to save the checkbox states in the paginator. We created a HashMap from repo IDs to boolean states and started the process of incorporating that into the paginator logic, but ran out of time before that was all done. We made good progress, though, and there are several quite specific things to address when we come back to this on Saturday morning.\n\nFor the moment (probably through September 2022) I'm streaming every Tuesday and Saturday from 10am-noon CDT (https://twitch.tv/NicMcPhee). We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\nI'm also going to be streaming on Twitch on Wednesday nights from 7-9pm CDT and Saturday afternoons from 2-4pm CDT. I'm going to be using those streaming slots to work on implementing an evolutionary computation system in Rust to see what the performance is like, and working on some possible lab exercises in Rust for our Systems Practicum course.\n\nI've also created a Discord server for Unhindered by Coding. There's an invite link QR code in the video, but that's only good for a week. If you stumble across this later and would like to join, let me know in the comments and I can share a working invite link.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/yfr4RRJmYag/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/yfr4RRJmYag/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/yfr4RRJmYag/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/yfr4RRJmYag/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/yfr4RRJmYag/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 39,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "yfr4RRJmYag"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "f3b94-0IzYjjQnbkBlipKyGSOrI",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLlI5MUNKZXh1c1pB",
            "snippet": {
                "publishedAt": "2022-08-27T22:00:09Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Episode 22: Implement a threaded echo server in Rust!",
                "description": "This is the first in a new sub-series of episodes focusing on implementing and building out a set of labs in Rust for our Systems lab course.\n\nWe've got a nice set of labs for our Systems lab course, many of which use C or Java. I'd like to see what those labs look like in Rust instead, and possibly write some new labs that introduce the key features of Rust in a somewhat structured way.\n\nAs a first simple step on this path, this episode implements a non-threaded echo server in Rust, and then extends it to use threads to handle connections concurrently.\n\nAdding threads took a while because I flailed through figuring out which library(s) to use, and that ate up some time as I wrote and re-wrote code for different libraries. I eventually settled on Tokio for the threading library, and that ended up providing pretty much everything we needed for the project.\n\nThe code is actually pretty straightforward and works very nicely, but the error handling is pretty much non-existent at this point, with lots of '?' and at least one `expect` call. I think this be a great opportunity to try one of the nice error handling libraries to try to improve that. That could become one of the major points of a lab, since the code itself is really quite straightforward. I also think we should add proper logging, which would be a natural part of improving the error handling.\n\nThere's also no testing at the moment, although we could use variations on the existing `bats` tests to extend that. We might be able to mock some of the Tokio responses, although I'm not sure how complicated that would be.\n\nIt's interesting that writing this in Rust actually makes the handling of binary files more straightforward since the \"default\" Rust read/write tools work with arrays of `u8` as their basic type, so you get proper handling of binary files \"out of the box\".\n\nThe audio on this is pretty annoying, with a *lot* of thumping as I type and click. This is often an issue, but this time it seems much worse than normal. I really out to get a boom for my microphone as I think that would substantially improve the audio. \n\nFor the moment (probably through September 2022) I'm going to be streaming on Twitch (https://twitch.tv/NicMcPhee) every Saturday afternoon from 2-4pm CDT with a focus on these kinds of systems projects.\n\nI'm also streaming on Twitch every Tuesday and Saturday from 10am-noon CDT. We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\nLastly, I'm streaming on Twitch on Wednesday nights from 7-9pm CDT working on implementing an evolutionary computation system in Rust, in part to see what the performance is like.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/R91CJexusZA/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/R91CJexusZA/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/R91CJexusZA/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 40,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "R91CJexusZA"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "D1YGbwB3CvwiBt4kTbZq8UixRwU",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLkNVbXpPYVlPQlZJ",
            "snippet": {
                "publishedAt": "2022-08-27T17:40:47Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Episode 19: Refactor ice-repos components into modules",
                "description": "Having everything in `main.rs` had just gotten to be too much, so 'twas time to refactor all the components out into modules! This was probably not super exciting, as it was mostly two hours of me copy-pasting and then fixing resulting errors and warnings, but it needed to happen.\n\nI could put time codes in for the various extractions, but I don't have time for that right now. Maybe later?\n\nFor the moment (probably through September 2022) I'm streaming every Tuesday and Saturday from 10am-noon CDT (https://twitch.tv/NicMcPhee). We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\nI'm also going to be streaming on Twitch on Wednesday nights from 7-9pm CDT and Saturday afternoons from 2-4pm CDT. I'm going to be using those streaming slots to work on implementing an evolutionary computation system in Rust to see what the performance is like, and working on some possible lab exercises in Rust for our Systems Practicum course.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/CUmzOaYOBVI/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/CUmzOaYOBVI/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/CUmzOaYOBVI/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/CUmzOaYOBVI/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/CUmzOaYOBVI/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 41,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "CUmzOaYOBVI"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "r8xp9bUQZO2B69_s9kJOa963o98",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLk1mZm5TZ2xJdjNN",
            "snippet": {
                "publishedAt": "2022-08-25T02:35:52Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Episode 20: Evolutionary Computation in Rust!",
                "description": "A new night! A new topic! New participants!\n\nAs an experiment, I'm trying a few additional streaming sessions per week, including Wednesdays from 7-9pm CDT, where I'll work on an evolutionary computation system in Rust. This was the first of those streaming sessions!\n\nI spent a _ton_ of time going over what evolutionary computation is, and skimming over parts of the the existing code. (I've been working on this on and off for a few weeks.) We really only programmed for the last 15-20 minutes, so skip ahead if you don't want all that background.\n\nThe main achievement of the session was we parameterized the `next_generation` code so that we pass in a scoring function instead of having that hard coded in several places. Hopefully next week we'll get more actual coding done and I'll babble on less. :)\n\nFor the moment (probably through September 2022) I'm streaming four times a week:\n\n* Every Tuesday and Saturday from 10am-noon CDT (https://twitch.tv/NicMcPhee). We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\n* Wednesday nights from 7-9pm CDT, implementing an evolutionary computation system in Rust to see what the performance is like. https://github.com/NicMcPhee/rust-ga\n\n* Saturday afternoons from 2-4pm CDT, working on some possible lab exercises in Rust for our Systems Practicum course.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/MffnSglIv3M/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/MffnSglIv3M/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/MffnSglIv3M/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/MffnSglIv3M/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/MffnSglIv3M/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 42,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "MffnSglIv3M"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "ITqeMB1JUEL4WmWmAyVN3YyoZTs",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLjVpVUdGa0RHZHZz",
            "snippet": {
                "publishedAt": "2022-08-23T17:48:45Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Episode 19: Complete the pagination in ice-repos!",
                "description": "After several weeks on pagination for ice-repos, I think we have that working! I'm even going to merge in that branch. :)\n\nThe main thing we had to do with the pagination was fix an error where I was setting the current page to 1 every time we made an HTTP request instead of preserving the current page across those calls. Fixing that was pretty trivial, and seemed to get everything going again.\n\nWe also extracted the card display out into its own component, which wasn't a big deal, but did require cloning `Repository` structs in an annoying way. (We tried passing in references, but then we got into lifetime hell, so we wandered away.)\n\nThere was some nice discussion with esitsu@Twitch about the big pile of cloning that's going on, which makes me think we might want to come back to the idea of using Yew contexts to save the \"share data\" across a number of contexts. I think I should really try to sketch the DOM and data flow out on a piece of paper so I have a better idea of who needs what/when/why.\n\nFor the moment (probably through September 2022) I'm streaming every Tuesday and Saturday from 10am-noon CDT (https://twitch.tv/NicMcPhee). We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\nI'm also going to be streaming on Twitch on Wednesday nights from 7-9pm CDT and Saturday afternoons from 2-4pm CDT. I'm going to be using those streaming slots to work on implementing an evolutionary computation system in Rust to see what the performance is like, and working on some possible lab exercises in Rust for our Systems Practicum course.\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/5iUGFkDGdvs/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/5iUGFkDGdvs/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/5iUGFkDGdvs/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/5iUGFkDGdvs/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/5iUGFkDGdvs/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 43,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "5iUGFkDGdvs"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "DWuLEB_HTGSISuAo41EBmFR1E3s",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLmd0cnVRQndHSXFF",
            "snippet": {
                "publishedAt": "2022-08-20T17:56:17Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Episode 18: Improving our error handling in ice-repos!",
                "description": "I'd frankly gotten really twisted up about how we were handling the potential errors that came from parsing the `link` field in the HTTP response from GitHub. This cleaned that mess up a lot, and I think made things a lot cleaner than they were before. Huge thanks to esitsu@Twitch and Wgaffa@Twitch for the many suggestions and corrections as I flailed through all this. (I was a bit tired still, and this wasn't my smartest day.)\n\nWe managed to also resolve a small ownership issue that was preventing things from compiling, so everything builds and runs now. The functionality of the page buttons still isn't correct, but I'm hoping we can fix that soon.\n\nFor the moment, at least, I'm streaming every Tuesday and Saturday from 10am-noon CDT (https://twitch.tv/NicMcPhee). We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/gtruQBwGIqE/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/gtruQBwGIqE/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/gtruQBwGIqE/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/gtruQBwGIqE/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/gtruQBwGIqE/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 44,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "gtruQBwGIqE"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "sIbdfwA2nZQpIBZ8MDzRc_yc2kU",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLk5kOEZEcHZ1cXI4",
            "snippet": {
                "publishedAt": "2022-08-13T18:28:35Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Episode 4: Going through the Rustlings exercises, part 4: Generics, options, traits, & tests",
                "description": "Here we go through some more of the Rustlings exercises (https://github.com/rust-lang/rustlings). Today we got through a lot, in part because many of the exercises were pretty straightforward. We got through the exercises on generics (figured out something that had been niggling at me), options, traits, and tests, and did Quiz 3. We started on the standard library exercises, but still have the last two exercises on iterators to do there. I learned some cool things about `collect()` on iterators, though.\n\nThe quizzes continue to be a little odd. It was strange that Quiz 3 made no reference to anything except the testing tools, even though we'd covered errors, generics, options, and traits since Quiz 2. It would be nice if the quizzes were a little more comprehensive?\n\nThe `Arc` exercise seemed a bit of a jump if you'd never done anything with threads in Rust before. I had, and so it was OK, but I can imagine that exercise being a real stumbling block for folks with less or different experience.\n\nBelow is a pretty detailed set of time codes.\n\n0:00 – Introduction and state of play with the Rustlings work\n2:18 – Generics (3 exercises)\n19:10 – Options (3 exercises)\n 37:40 – Traits (2 exercises)\n47:40 – Tests (3 exercises)\n56:05 – Quiz 3\n58:18 – Standard library types: Box and Arc (1 exercise each)\n1:15:10 – Standard library types: Iterators (first 3 exercises)\n1:56:00 – Wrap up\n\nFor the moment, at least, I'm streaming every Tuesday and Saturday from 10am-noon CDT (https://twitch.tv/NicMcPhee). We're currently just working through the Rustlings exercises, and I suspect we'll finish in one or two more sessions depending on the exercises and my mental capacity. After that I'll probably actually try to build a simple app in Rust to solve a problem that's annoying me. :)\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/Nd8FDpvuqr8/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/Nd8FDpvuqr8/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/Nd8FDpvuqr8/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/Nd8FDpvuqr8/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 45,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "Nd8FDpvuqr8"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "qcvXmNCnwiHKC9DzpEUEtuV0MZQ",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLmlqa2RlNnV3M1Y0",
            "snippet": {
                "publishedAt": "2022-08-13T18:14:55Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Episode 17: Rewriting pagination parsing in ice-repos!",
                "description": "A really interesting day. It sorta seemed like not a lot happened, but we actually changed, discussed, and (I at least) learned a lot.\n\nI decided that I didn't like my use of regex to parse the last page from the link field in the HTTP response from GitHub. I'd had two errors because of that, and there was no way for the Rust compiler to help me understand what was happening there.\n\nSo I went with esitsu@Twitch's suggestion from a few episodes ago to instead use `String` tools like `split()` and iterator tools like `find_map()`. This was really nice, and ended up with a structure were I was much more confident that it in fact worked.\n\nOne other thing that it highlighted, though, were the many ways that could fail, as we had `unwrap()`s all over the place. After some discussion, we decided that it would make sense to return a `Result` type instead of just a `usize`. In fact we returned a `Result` containing an `Option`, using the `Option` to indicate the possibility of there being no `rel=\"last\"` entry (which happens when we're on the last page), and the `Result` to handle the various error conditions.\n\nWe then created a custom error type and implemented some `From` traits so we could use `?` to simplify things.\n\nWe finished getting that function to compile near the end of scheduled stream time, so the code that calls it is still broken and there are some other issues to be resolved, but I think we made really good progress. Bit thanks to esitsu@Twitch and Patatas_del_papa@Twitch for all their great help today!\n\nFor the moment, at least, I'm streaming every Tuesday and Saturday from 10am-noon CDT (https://twitch.tv/NicMcPhee). We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/ijkde6uw3V4/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/ijkde6uw3V4/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/ijkde6uw3V4/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/ijkde6uw3V4/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/ijkde6uw3V4/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 46,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "ijkde6uw3V4"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "x8-RKBIpxHUExMPM7r_uadz2lAg",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLkgybTlaUXNRZEkw",
            "snippet": {
                "publishedAt": "2022-08-09T17:52:39Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Episode 16: Adding DaisyUI pagination buttons to ice-repos!",
                "description": "More good progress today, and we're getting close to having the paginator button logic working! Lots of folks showed up today, and there was some excellent discussion and help from the team.\n\nI started by cleaning up a several Clippy warnings, including a nice use of `map_or_else` to replace an `if-else` block.\n\nesitsu@Twitch made a nice suggestion for how to only compile the regex that extracts the last page number once, and in a lazy way at that! We had to bring in the `once_cell` crate because I'm not using the absolute latest version of everything (where `once_cell` is now in `std`), so we'll probably want to switch to the `std` version when I upgrade.\n\nRelated to that, there was also a nice discussion of whether to use `unwrap()` or `expect()` on the `Regex::new()` call, and Patatas_del_papa@Twitch suggested \"Using unwrap() in Rust is Okay\" by Andrew Gallant (https://blog.burntsushi.net/unwrap/), which explicit lists `Regex::new()` as a case where `unwrap()` might just be the best option. That made me feel a lot better about using `unwrap()` there, and might give me some better understanding of my options for error handling in other places.\n\nWe updated the paginator to only display pagination controls if there are at least two pages, and in the process found a bug in my regular expression. I thought I'd fixed the bug, but later work made it clear that I haven't, and I really need to decide how I want to handle this given that the regex has failed twice now.\n\nI think we're _nearly_ done with adding the logic to the pagination buttons. It may even be correct, but that's not clear because we still seem to have regex issues. I ended up making a separate callback function for every button, which seems a bit heavy, but digging around in the DOM seems worse. We also had to add the `current_page` to the set of dependencies in `use_effect_with_deps` so that it will update the view when the current page changes.\n\nHopefully we can get all that fixed in the next stream, and then maybe think about error handling for a bit before moving on to the bits that will require authentication..\n\nFor the moment, at least, I'm streaming every Tuesday and Saturday from 10am-noon CDT (https://twitch.tv/NicMcPhee). We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/H2m9ZQsQdI0/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/H2m9ZQsQdI0/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/H2m9ZQsQdI0/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 47,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "H2m9ZQsQdI0"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "5Hz1n5yJ7M_iiS0VfANXKCjZvJQ",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLklkR0RWV3J5Xzcw",
            "snippet": {
                "publishedAt": "2022-08-06T17:50:51Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Episode 15: Adding DaisyUI pagination buttons to ice-repos!",
                "description": "More good progress today, and we have the proper pagination buttons being displayed!\n\nI started with a bunch of refactoring that extracted the display of repository lists into a new `RepositoryList` child component, renaming the old `RepositoryList` to a `RepositoryPaginator` parent component. `RepositoryPaginator` then makes the HTTP request, and passes the list of repositories in to the `RepositoryList` component for display.\n\n(Later on the `RepositoryList` component will need to also include the checkboxes and emit the state of those check boxes to the parent, but we're not there yet.)\n\nWe then used the last page info that we parsed out last week to determine the correct number of page buttons to display. These are now displayed, and the current page is highlighted with the `btn-active` class.\n\nCurrently none of the buttons *do* anything, and fixing that is probably the next step. We'll need to add an `onclick` to each of the buttons, and update the current page state component as appropriate.\n\nFor the moment, at least, I'm streaming every Tuesday and Saturday from 10am-noon CDT (https://twitch.tv/NicMcPhee). We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/IdGDVWry_70/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/IdGDVWry_70/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/IdGDVWry_70/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    },
                    "standard": {
                        "url": "https://i.ytimg.com/vi/IdGDVWry_70/sddefault.jpg",
                        "width": 640,
                        "height": 480
                    },
                    "maxres": {
                        "url": "https://i.ytimg.com/vi/IdGDVWry_70/maxresdefault.jpg",
                        "width": 1280,
                        "height": 720
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 48,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "IdGDVWry_70"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        },
        {
            "kind": "youtube#playlistItem",
            "etag": "StBAsTIveBeK8dg4BDcmPxlWrpU",
            "id": "VVU1dEdJUXRpMlVZZkNTSTlhVWVTWkZRLjg1aW5UNy01YVEw",
            "snippet": {
                "publishedAt": "2022-08-02T18:07:00Z",
                "channelId": "UC5tGIQti2UYfCSI9aUeSZFQ",
                "title": "Episode 14: Progress on ice-repos! DaisyUI! Starting pagination!",
                "description": "Made some excellent progress today, with a ton of help from @esitsu on Twitch (https://www.twitch.tv/esitsu)!\n\nWe first added the DaisyUI component library, and used that to replace my hacked up header content with a nice Hero component, and then did some refactoring to clean up that code.\n\nAfter that I felt like we were in a good place to add pagination since DaisyUI has support for pagination components. We got rather bogged down, though, in figuring out how to determinate how many repositories an organization had so we'd know how many pages there were. This is where @esitsu was a huge help, and was able to figure out that we could get that from the `link` field in the response headers. The parsing on that isn't yet done, but we're heading in a useful direction, and I'm pretty confident we can get the pagination working in the next episode.\n\nIt's clear in all this that I still really don't \"know\" Rust. I have to look up the syntax for all kinds of \"simple\" things like matching. Weirdly, this is a place where something like GitHub CoPilot would probably increase my speed, because I could presumably just start something and it would fill in something that at least had legal syntax.\n\nFor the moment, at least, I'm streaming every Tuesday and Saturday from 10am-noon CDT (https://twitch.tv/NicMcPhee). We're currently working on a simple web app in Rust to solve a problem that's annoying me. :) See this repo for a description of the problem: https://github.com/NicMcPhee/ice-repos\n\nThanks for watching!",
                "thumbnails": {
                    "default": {
                        "url": "https://i.ytimg.com/vi/85inT7-5aQ0/default.jpg",
                        "width": 120,
                        "height": 90
                    },
                    "medium": {
                        "url": "https://i.ytimg.com/vi/85inT7-5aQ0/mqdefault.jpg",
                        "width": 320,
                        "height": 180
                    },
                    "high": {
                        "url": "https://i.ytimg.com/vi/85inT7-5aQ0/hqdefault.jpg",
                        "width": 480,
                        "height": 360
                    }
                },
                "channelTitle": "Unhindered by Coding!",
                "playlistId": "UU5tGIQti2UYfCSI9aUeSZFQ",
                "position": 49,
                "resourceId": {
                    "kind": "youtube#video",
                    "videoId": "85inT7-5aQ0"
                },
                "videoOwnerChannelTitle": "Unhindered by Coding!",
                "videoOwnerChannelId": "UC5tGIQti2UYfCSI9aUeSZFQ"
            }
        }
    ],
    "pageInfo": {
        "totalResults": 60,
        "resultsPerPage": 50
    }
}